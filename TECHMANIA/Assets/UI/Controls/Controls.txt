function WaitForSeconds(seconds)
    local timer = 0
    while (timer < seconds) do
        timer = timer + time.deltaTime
        coroutine.yield()
    end
end

function SetProgressBar(progressBar, percent)
    progressBar.Q("filled-portion").style.right = tm.style.LengthInPercent(100 - percent)
end

function SetUpAllSliders(root)
    root.Query(nil, "slider").ForEach(function (element)
        function UpdateSliderAppearance(slider)
            local percent = (slider.value - slider.lowValue) * 100 / (slider.highValue - slider.lowValue)
            SetProgressBar(element.parent, percent)
            element.Q("overlay-center").style.left = tm.style.LengthInPercent(percent)
        end
        element.RegisterCallback("ChangeFloat", UpdateSliderAppearance)
        element.RegisterCallback("ChangeInt", UpdateSliderAppearance)
        UpdateSliderAppearance(element)
    end)
end

function SetUpAllToggles(root)
    root.Query(nil, "toggle-track").ForEach(function (element)
        element.RegisterCallback("Click", function (track)
            track.ToggleInClassList("toggle-track-on")
            track.ToggleInClassList("toggle-track-off")
        end)
    end)
end

function SetUpButtonSounds(root, audio, className)
    root.Query(nil, className).ForEach(function (element)
        element.RegisterCallback("Click", function ()
            audio.Play("Assets/UI/SFX/Click.wav", "SFX")
        end)
        element.RegisterCallback("PointerOver", function ()
            audio.Play("Assets/UI/SFX/Select.wav", "SFX")
        end)
    end)
end

function SetUpAllScrollingTexts(root)
    root.Query(nil, "scrolling-text").ForEach(function (element)
        tm.StartCoroutine(function ()
            -- If we need element.horizontalScroller.lowValue/highValue, we have to wait 1 frame
            -- coroutine.yield()
            local waitLength = 2
            local scrollLength = 2
            local timer = 0
            while (true) do
                WaitForSeconds(waitLength)
                timer = 0
                while (timer < scrollLength) do
                    local progress = timer / scrollLength
                    element.horizontalScroller.value = math.Lerp(
                        element.horizontalScroller.lowValue,
                        element.horizontalScroller.highValue,
                        progress
                    )
                    timer = timer + time.deltaTime
                    coroutine.yield()
                end
                WaitForSeconds(waitLength)
                timer = 0
                while (timer < scrollLength) do
                    local progress = timer / scrollLength
                    element.horizontalScroller.value = math.Lerp(
                        element.horizontalScroller.lowValue,
                        element.horizontalScroller.highValue,
                        1 - progress
                    )
                    timer = timer + time.deltaTime
                    coroutine.yield()
                end
            end
        end)
    end)
end

function InitializeControls(root, audio)
    SetUpAllSliders(root)
    SetUpAllToggles(root)
    SetUpButtonSounds(root, audio, "button-text")
    SetUpButtonSounds(root, audio, "button-outlined")
    SetUpButtonSounds(root, audio, "button-contained")
    SetUpButtonSounds(root, audio, "button-card")
    SetUpButtonSounds(root, audio, "toggle-track")
    SetUpAllScrollingTexts(root)
end