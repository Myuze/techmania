function WaitForSeconds(seconds)
    local timer = 0
    while (timer < seconds) do
        timer = timer + unity.time.deltaTime
        coroutine.yield()
    end
end

function SetProgressBar(progressBar, percent)
    progressBar.Q("filled-portion").style.right =
        util.style.LengthInPercent(100 - percent)
end

function UpdateSliderAppearance(slider)
    local percent = (slider.value - slider.lowValue) * 100 / 
        (slider.highValue - slider.lowValue)
    SetProgressBar(slider.parent, percent)
    slider.Q("overlay-center").style.left =
        util.style.LengthInPercent(percent)
end

function SetUpAllSliders(tm)
    tm.root.Query(nil, "slider").ForEach(function (element)
        element.RegisterCallback("ChangeFloat", UpdateSliderAppearance)
        element.RegisterCallback("ChangeInt", UpdateSliderAppearance)
        UpdateSliderAppearance(element)
    end)
end

function SetSliderValueWithoutNotify(slider, value)
    slider.SetValueWithoutNotify(value)
    UpdateSliderAppearance(slider)
end

function SetUpAllToggles(tm)
    tm.root.Query(nil, "toggle-track").ForEach(function (element)
        element.RegisterCallback("Click", function (track)
            track.ToggleInClassList("toggle-track-on")
            track.ToggleInClassList("toggle-track-off")
        end)
    end)
end

function IsToggleOn(trackElement)
    return trackElement.ClassListContains("toggle-track-on")
end

function SetToggleIsOn(trackElement, on)
    trackElement.EnableInClassList("toggle-track-on", on)
    trackElement.EnableInClassList("toggle-track-off", not on)
end

function SetUpClickSound(tm, element)
    if (element.ClassListContains("special-click-sfx")) then return end
    local sfxName = "Assets/UI/SFX/Click.wav"
    if (element.name == "back-button" or
        element.name == "cancel-button") then
        sfxName = "Assets/UI/SFX/Back.wav"
    end
    element.RegisterCallback("Click", function ()
        tm.audio.Play(util.io.LoadAudioFromTheme(sfxName), "SFX")
    end)
end

function SetUpPointerOverSound(tm, element)
    element.RegisterCallback("PointerOver", function (element)
        if (element.enabledInHierarchy) then
            tm.audio.Play(util.io.LoadAudioFromTheme("Assets/UI/SFX/Select.wav"), "SFX")
        end
    end)
end

function SetUpButtonSounds(tm, element)
    SetUpClickSound(tm, element)
    SetUpPointerOverSound(tm, element)
end

function SetUpButtonSoundsForClass(tm, className)
    tm.root.Query(nil, className).ForEach(function (element)
        SetUpButtonSounds(tm, element)
    end)
end

function SetUpSliderSounds(tm)
    tm.root.Query(nil, "slider").ForEach(function (element)
        SetUpPointerOverSound(tm, element)
    end)
end

function SetUpScrollingText(tm, scrollingTextContainer)
    scrollingTextContainer.Q("unity-content-and-vertical-scroll-container").pickable = false
    scrollingTextContainer.Q("unity-content-viewport").pickable = false
    scrollingTextContainer.Q("unity-content-container").pickable = false
    function ContainerUpdate(element)
        local low = element.horizontalScroller.lowValue
        local high = element.horizontalScroller.highValue
        if (net.float.IsNaN(high) or high <= low) then
            return
        end
        local scrollDuration = 4
        local pingPongTime = unity.mathf.PingPong(unity.time.time, scrollDuration)
        -- InverseLerp's output is clamped between 0 and 1.
        local value = unity.mathf.InverseLerp(scrollDuration * 0.25, scrollDuration * 0.75, pingPongTime)
        element.horizontalScroller.value = unity.mathf.Lerp(low, high, value)
    end
    scrollingTextContainer.UnregisterCallback("FrameUpdate", ContainerUpdate)
    scrollingTextContainer.RegisterCallback("FrameUpdate", ContainerUpdate)
end

function SetUpAllScrollingTexts(tm)
    tm.root.Query(nil, "scrolling-text").ForEach(function (container)
        SetUpScrollingText(tm, container)
    end)
end

function InitializeControls(tm)
    -- To apply themes to dropdowns
    tm.SetThemeStyleSheet("Assets/UI/Theme StyleSheet.tss")
    SetUpAllSliders(tm)
    SetUpAllToggles(tm)
    SetUpButtonSoundsForClass(tm, "button-text")
    SetUpButtonSoundsForClass(tm, "button-icon")
    SetUpButtonSoundsForClass(tm, "button-outlined")
    SetUpButtonSoundsForClass(tm, "button-icon-outlined")
    SetUpButtonSoundsForClass(tm, "button-contained")
    SetUpButtonSoundsForClass(tm, "button-icon-contained")
    SetUpButtonSoundsForClass(tm, "button-card")
    SetUpButtonSoundsForClass(tm, "toggle-track")
    SetUpButtonSoundsForClass(tm, "input-field")
    SetUpSliderSounds(tm)
    SetUpAllScrollingTexts(tm)
end

-- The "from" panel's x transitions from 0 to length;
-- The "to" panel's x transitions from -length to 0.
function TransitionPanelCoroutine(tm, from, to, length, toPanelInitializer)
    local transitionTime = 0.2

    from.display = true
    to.display = false
    FadeOutCoroutine(tm, from, length, 0)
    from.display = false

    to.display = true
    to.style.opacity = util.style.Float(0)
    coroutine.yield()
    if (toPanelInitializer != nil) then toPanelInitializer() end

    FadeInCoroutine(tm, to, -length, 0)
end

-- toPanelInitializer will be called 1 frame after the "to"
-- panel becomes displayed, so all the layout is ready.
--
-- Avoid adding VisualElements inside toPanelInitializer:
-- https://forum.unity.com/threads/uitoolkit-styleanimation-issue-transition-property-references-non-set-value.1257483/
function TransitionPanelFromLeft(tm, from, to, toPanelInitializer)
    tm.StartCoroutine(function()
        TransitionPanelCoroutine(tm, from, to,
            100,  -- length
            toPanelInitializer)
    end)
end

-- toPanelInitializer will be called 1 frame after the "to"
-- panel becomes displayed, so all the layout is ready.
--
-- Avoid adding VisualElements inside toPanelInitializer:
-- https://forum.unity.com/threads/uitoolkit-styleanimation-issue-transition-property-references-non-set-value.1257483/
function TransitionPanelFromRight(tm, from, to, toPanelInitializer)
    tm.StartCoroutine(function()
        TransitionPanelCoroutine(tm, from, to,
            -100,  -- length
            toPanelInitializer)
    end)
end

function FadeOutThenInToPanel(tm, from, to, toPanelInitializer)
    tm.StartCoroutine(function()
        TransitionPanelCoroutine(tm, from, to,
            0,  -- length
            toPanelInitializer
        )
    end)
end

function SetRadioButton(onButton, buttonsInGroup)
    for _, radio in ipairs(buttonsInGroup) do
        radio.Q("on-icon").display = (radio == onButton)
        radio.Q("off-icon").display = not (radio == onButton)
    end
end