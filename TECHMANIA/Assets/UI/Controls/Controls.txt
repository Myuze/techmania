function WaitForSeconds(seconds)
    local timer = 0
    while (timer < seconds) do
        timer = timer + time.deltaTime
        coroutine.yield()
    end
end

function SetProgressBar(progressBar, percent)
    progressBar.Q("filled-portion").style.right =
        tm.style.LengthInPercent(100 - percent)
end

function SetUpAllSliders(tm)
    tm.root.Query(nil, "slider").ForEach(function (element)
        function UpdateSliderAppearance(slider)
            local percent = (slider.value - slider.lowValue) * 100 / 
                (slider.highValue - slider.lowValue)
            SetProgressBar(element.parent, percent)
            element.Q("overlay-center").style.left =
                tm.style.LengthInPercent(percent)
        end
        element.RegisterCallback("ChangeFloat", UpdateSliderAppearance)
        element.RegisterCallback("ChangeInt", UpdateSliderAppearance)
        UpdateSliderAppearance(element)
    end)
end

function SetUpAllToggles(tm)
    tm.root.Query(nil, "toggle-track").ForEach(function (element)
        element.RegisterCallback("Click", function (track)
            track.ToggleInClassList("toggle-track-on")
            track.ToggleInClassList("toggle-track-off")
        end)
    end)
end

function SetUpClickSound(tm, className)
    tm.root.Query(nil, className).ForEach(function (element)
        element.RegisterCallback("Click", function ()
            tm.audio.Play("Assets/UI/SFX/Click.wav", "SFX")
        end)
    end)
end

function SetUpPointerOverSound(tm, className)
    tm.root.Query(nil, className).ForEach(function (element)
        element.RegisterCallback("PointerOver", function ()
            tm.audio.Play("Assets/UI/SFX/Select.wav", "SFX")
        end)
    end)
end

function SetUpButtonSounds(tm, className)
    SetUpClickSound(tm, className)
    SetUpPointerOverSound(tm, className)
end

function SetUpAllScrollingTexts(tm)
    tm.root.Query(nil, "scrolling-text").ForEach(function (element)
        tm.StartCoroutine(function ()
            -- If we need element.horizontalScroller.lowValue/highValue,
            -- we have to wait 1 frame
            -- coroutine.yield()
            local waitLength = 2
            local scrollLength = 2
            local timer = 0
            while (true) do
                WaitForSeconds(waitLength)
                timer = 0
                while (timer < scrollLength) do
                    local progress = timer / scrollLength
                    element.horizontalScroller.value = math.Lerp(
                        element.horizontalScroller.lowValue,
                        element.horizontalScroller.highValue,
                        progress
                    )
                    timer = timer + time.deltaTime
                    coroutine.yield()
                end
                WaitForSeconds(waitLength)
                timer = 0
                while (timer < scrollLength) do
                    local progress = timer / scrollLength
                    element.horizontalScroller.value = math.Lerp(
                        element.horizontalScroller.lowValue,
                        element.horizontalScroller.highValue,
                        1 - progress
                    )
                    timer = timer + time.deltaTime
                    coroutine.yield()
                end
            end
        end)
    end)
end

function InitializeControls(tm)
    SetUpAllSliders(tm)
    SetUpAllToggles(tm)
    SetUpButtonSounds(tm, "button-text")
    SetUpButtonSounds(tm, "button-outlined")
    SetUpButtonSounds(tm, "button-contained")
    SetUpButtonSounds(tm, "button-card")
    SetUpButtonSounds(tm, "toggle-track")
    SetUpButtonSounds(tm, "input-field")
    SetUpPointerOverSound(tm, "slider")
    SetUpAllScrollingTexts(tm)
end

function TransitionPanelCoroutine(from, to, direction)
    local transitionTime = 0.2
    local transitionLength = 100 * direction
    function DampedLerp(a, b, t)
        return math.Lerp(a, b, math.Pow(t, 0.6))
    end

    local timer = 0
    from.display = true
    from.style.opacity = tm.style.Float(1)
    while (timer < transitionTime) do
        local progress = timer / transitionTime
        local x = DampedLerp(0, transitionLength, progress)
        from.style.opacity = tm.style.Float(1 - progress)
        from.style.translate = tm.style.TranslateInPixel(x, 0)
        timer = timer + time.deltaTime
        coroutine.yield()
    end
    from.display = false

    timer = 0
    to.style.opacity = tm.style.Float(0)
    to.display = true
    while (timer < transitionTime) do
        local progress = timer / transitionTime
        local x = DampedLerp(-transitionLength, 0, progress)
        to.style.opacity = tm.style.Float(progress)
        to.style.translate = tm.style.TranslateInPixel(x, 0)
        timer = timer + time.deltaTime
        coroutine.yield()
    end
end

function TransitionPanelFromLeft(from, to)
    tm.StartCoroutine(function()
        TransitionPanelCoroutine(from, to, 1)
    end)
end

function TransitionPanelFromRight(from, to)
    tm.StartCoroutine(function()
        TransitionPanelCoroutine(from, to, -1)
    end)
end