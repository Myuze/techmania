function WaitForSeconds(seconds)
    local timer = 0
    while (timer < seconds) do
        timer = timer + unity.time.deltaTime
        coroutine.yield()
    end
end

function StyleLengthInPercent(percent)
    return unity.styleLength.__new(
        unity.length.__new(
            percent, unity.enum.lengthUnit.Percent
        )
    )
end

function SetProgressBar(progressBar, percent)
    progressBar.Q("filled-portion").style.right =
        StyleLengthInPercent(100 - percent)
end

function UpdateSliderAppearance(slider)
    local percent = (slider.value - slider.lowValue) * 100 / 
        (slider.highValue - slider.lowValue)
    SetProgressBar(slider.parent, percent)
    slider.Q("overlay-center").style.left =
        StyleLengthInPercent(percent)
end

function SetUpAllSliders()
    tm.root.Query(nil, "slider").ForEach(function (element)
        element.RegisterCallback(eventType.ChangeFloat, UpdateSliderAppearance)
        element.RegisterCallback(eventType.ChangeInt, UpdateSliderAppearance)
        UpdateSliderAppearance(element)
    end)
end

function SetSliderValueWithoutNotify(slider, value)
    slider.SetValueWithoutNotify(value)
    UpdateSliderAppearance(slider)
end

function SetUpAllToggles()
    tm.root.Query(nil, "toggle-track").ForEach(function (element)
        element.RegisterCallback(eventType.Click, function (track)
            track.ToggleInClassList("toggle-track-on")
            track.ToggleInClassList("toggle-track-off")
        end)
    end)
end

function IsToggleOn(trackElement)
    return trackElement.ClassListContains("toggle-track-on")
end

function SetToggleIsOn(trackElement, on)
    trackElement.EnableInClassList("toggle-track-on", on)
    trackElement.EnableInClassList("toggle-track-off", not on)
end

function SetUpClickSound(element)
    if (element.ClassListContains("special-click-sfx")) then return end
    local sfxName = "Assets/UI/SFX/Click.wav"
    if (element.name == "back-button" or
        element.name == "cancel-button") then
        sfxName = "Assets/UI/SFX/Back.wav"
    end
    element.RegisterCallback(eventType.Click, function ()
        tm.audio.Play(util.io.LoadAudioFromTheme(sfxName), tm.enum.audioChannel.SFX)
    end)
end

function SetUpPointerOverSound(element)
    element.RegisterCallback(eventType.PointerOver, function (element)
        if (element.enabledInHierarchy) then
            tm.audio.Play(util.io.LoadAudioFromTheme("Assets/UI/SFX/Select.wav"), tm.enum.audioChannel.SFX)
        end
    end)
end

function SetUpButtonSounds(element)
    SetUpClickSound(element)
    SetUpPointerOverSound(element)
end

function SetUpButtonSoundsForClass(className)
    tm.root.Query(nil, className).ForEach(function (element)
        SetUpButtonSounds(element)
    end)
end

function SetUpSliderSounds()
    tm.root.Query(nil, "slider").ForEach(function (element)
        SetUpPointerOverSound(element)
    end)
end

function SetUpScrollingText(scrollingTextContainer)
    scrollingTextContainer.Q("unity-content-and-vertical-scroll-container").pickable = false
    scrollingTextContainer.Q("unity-content-viewport").pickable = false
    scrollingTextContainer.Q("unity-content-container").pickable = false
    function ContainerUpdate(element)
        local low = element.horizontalScroller.lowValue
        local high = element.horizontalScroller.highValue
        if (net.float.IsNaN(high) or high <= low) then
            return
        end
        local scrollDuration = 4
        local pingPongTime = unity.mathf.PingPong(unity.time.time, scrollDuration)
        -- InverseLerp's output is clamped between 0 and 1.
        local value = unity.mathf.InverseLerp(scrollDuration * 0.25, scrollDuration * 0.75, pingPongTime)
        element.horizontalScroller.value = unity.mathf.Lerp(low, high, value)
    end
    scrollingTextContainer.UnregisterCallback(eventType.FrameUpdate, ContainerUpdate)
    scrollingTextContainer.RegisterCallback(eventType.FrameUpdate, ContainerUpdate)
end

function SetUpAllScrollingTexts()
    tm.root.Query(nil, "scrolling-text").ForEach(function (container)
        SetUpScrollingText(container)
    end)
end

function InitializeControls()
    -- To apply themes to dropdowns
    tm.SetThemeStyleSheet("Assets/UI/Theme StyleSheet.tss")
    SetUpAllSliders()
    SetUpAllToggles()
    SetUpButtonSoundsForClass("button-text")
    SetUpButtonSoundsForClass("button-icon")
    SetUpButtonSoundsForClass("button-outlined")
    SetUpButtonSoundsForClass("button-icon-outlined")
    SetUpButtonSoundsForClass("button-contained")
    SetUpButtonSoundsForClass("button-icon-contained")
    SetUpButtonSoundsForClass("button-card")
    SetUpButtonSoundsForClass("toggle-track")
    SetUpButtonSoundsForClass("input-field")
    SetUpSliderSounds()
    SetUpAllScrollingTexts()
end

-- The "from" panel's x transitions from 0 to length;
-- The "to" panel's x transitions from -length to 0.
function TransitionPanelCoroutine(from, to, length, toPanelInitializer)
    local transitionTime = 0.2

    from.display = true
    to.display = false
    FadeOutCoroutine(from, length, 0)
    from.display = false

    to.display = true
    to.style.opacity = unity.styleFloat.__new(0)
    coroutine.yield()
    if (toPanelInitializer != nil) then toPanelInitializer() end

    FadeInCoroutine(to, -length, 0)
end

-- toPanelInitializer will be called 1 frame after the "to"
-- panel becomes displayed, so all the layout is ready.
--
-- Avoid adding VisualElements inside toPanelInitializer:
-- https://forum.unity.com/threads/uitoolkit-styleanimation-issue-transition-property-references-non-set-value.1257483/
function TransitionPanelFromLeft(from, to, toPanelInitializer)
    tm.StartCoroutine(function()
        TransitionPanelCoroutine(from, to,
            100,  -- length
            toPanelInitializer)
    end)
end

-- toPanelInitializer will be called 1 frame after the "to"
-- panel becomes displayed, so all the layout is ready.
--
-- Avoid adding VisualElements inside toPanelInitializer:
-- https://forum.unity.com/threads/uitoolkit-styleanimation-issue-transition-property-references-non-set-value.1257483/
function TransitionPanelFromRight(from, to, toPanelInitializer)
    tm.StartCoroutine(function()
        TransitionPanelCoroutine(from, to,
            -100,  -- length
            toPanelInitializer)
    end)
end

function FadeOutThenInToPanel(from, to, toPanelInitializer)
    tm.StartCoroutine(function()
        TransitionPanelCoroutine(from, to,
            0,  -- length
            toPanelInitializer
        )
    end)
end

function SetRadioButton(onButton, buttonsInGroup)
    for _, radio in ipairs(buttonsInGroup) do
        radio.Q("on-icon").display = (radio == onButton)
        radio.Q("off-icon").display = not (radio == onButton)
    end
end