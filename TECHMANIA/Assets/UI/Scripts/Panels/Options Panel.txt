function InitializeThemeOptions()
    function InitializeOneOption(key, defaultValue)
        if (not themeOptions.ContainsKey(key)) then
            themeOptions.Add(key, defaultValue)
        end
    end

    InitializeOneOption("showLoadingBar", "True")
    InitializeOneOption("showFps", "False")
    InitializeOneOption("showJudgementTally", "False")
    InitializeOneOption("showLaneDividers", "False")
    -- Hidden/ShowBeatMarkers/ShowHalfBeatMarkers
    InitializeOneOption("beatMarkers", "Hidden")
    -- FillEntireScreen/FillGameArea
    InitializeOneOption("backgroundScalingMode", "FillEntireScreen")
    InitializeOneOption("pauseWhenGameLosesFocus", "True")
end

optionsPanel = {
    panel = tm.root.Q("options-panel"),

    -- key: enum, value: display string
    fullScreenDisplayString = {},
    beatMarkersDisplayString = {},
    bgScalingDisplayString = {},
    rulesetDisplayString = {}
}

optionsPanel.UpdateCustomDataLocationDisplay = function()
    local panel = optionsPanel.panel
    local tracksContainer = panel.Q("tracks-folder-location")
    local skinsContainer = panel.Q("skins-folder-location")
    if (tm.options.customDataLocation) then
        if (tm.options.tracksFolderLocation == nil or
            tm.options.tracksFolderLocation == "") then
            tm.options.tracksFolderLocation = tm.paths.GetTrackRootFolder()
        end
        if (tm.options.skinsFolderLocation == nil or
            tm.options.skinsFolderLocation == "") then
            tm.options.skinsFolderLocation = tm.paths.GetSkinFolder()
        end
        tracksContainer.display = true
        tracksContainer.Q("location-display").text = tm.paths.EscapeBackslash(tm.options.tracksFolderLocation)
        skinsContainer.display = true
        skinsContainer.Q("location-display").text = tm.paths.EscapeBackslash(tm.options.skinsFolderLocation)
    else
        tracksContainer.display = false
        skinsContainer.display = false
    end
end

optionsPanel.Show = function()
    local panel = optionsPanel.panel

    local currentResolution = tm.options.GetCurrentResolutionAsObject()
    local resolutionDropdown = panel.Q("resolution").Q("dropdown")
    resolutionDropdown.SetValueWithoutNotify(currentResolution.ToString())

    local fullScreenDropdown = panel.Q("fullscreen-mode").Q("dropdown")
    fullScreenDropdown.SetValueWithoutNotify(optionsPanel.fullScreenDisplayString[tm.options.fullScreenMode])

    local vSyncToggle = panel.Q("vsync").Q("track")
    controls.SetToggleIsOn(vSyncToggle, tm.options.vSync)

    commonUI.ShowVolumeSliders(panel)

    local audioBufferDropdown = panel.Q("audio-buffer-size").Q("dropdown")
    audioBufferDropdown.SetValueWithoutNotify(tostring(tm.options.audioBufferSize))

    local languageDropdown = panel.Q("language").Q("dropdown")
    local locale = tm.l10n.GetAllLocales()[tm.options.locale]
    languageDropdown.SetValueWithoutNotify(locale.languageName)

    function ShowThemeOptionToggle(containerName, key)
        local toggle = panel.Q(containerName).Q("track")
        controls.SetToggleIsOn(toggle, net.bool.Parse(themeOptions[key]))
    end
    ShowThemeOptionToggle("show-loading-bar", "showLoadingBar")
    ShowThemeOptionToggle("show-fps", "showFps")
    ShowThemeOptionToggle("show-judgement-tally", "showJudgementTally")
    ShowThemeOptionToggle("show-lane-dividers", "showLaneDividers")

    local beatMarkersDropdown = panel.Q("beat-markers").Q("dropdown")
    beatMarkersDropdown.SetValueWithoutNotify(optionsPanel.beatMarkersDisplayString[themeOptions["beatMarkers"]])
    local bgScalingDropdown = panel.Q("background-scaling").Q("dropdown")
    bgScalingDropdown.SetValueWithoutNotify(optionsPanel.bgScalingDisplayString[themeOptions["backgroundScalingMode"]])

    local rulesetDropdown = panel.Q("ruleset").Q("dropdown")
    rulesetDropdown.SetValueWithoutNotify(optionsPanel.rulesetDisplayString[tm.options.ruleset])

    local customLocationToggle = panel.Q("custom-data-location").Q("track")
    controls.SetToggleIsOn(customLocationToggle, tm.options.customDataLocation)
    optionsPanel.UpdateCustomDataLocationDisplay()

    local offsetLatencyDisplay = panel.Q("offset-latency").Q("value-display")
    offsetLatencyDisplay.text =
        tm.options.touchOffsetMs .. "/" ..
        tm.options.touchLatencyMs .. "/" ..
        tm.options.keyboardMouseOffsetMs .. "/" ..
        tm.options.keyboardMouseLatencyMs .. " ms"

    ShowThemeOptionToggle("pause-when-lose-focus", "pauseWhenGameLosesFocus")

    local discordRichPresenceToggle = panel.Q("discord-rich-presence").Q("track")
    controls.SetToggleIsOn(discordRichPresenceToggle, tm.options.discordRichPresence)
end

optionsPanel.Initialize = function()
    function InitializeLocalizedDropdowns(panel)
        function InitializeOneLocalizedDropdown(containerName, stringTable)
            local dropdown = panel.Q(containerName).Q("dropdown")
            local choices = {}
            for enum, display in pairs(stringTable) do
                table.insert(choices, display)
            end
            dropdown.choices = choices
        end

        optionsPanel.fullScreenDisplayString = {
            [unity.enum.fullScreenMode.ExclusiveFullScreen] = tm.l10n.GetString("fullscreen_mode_exclusive_fullscreen"),
            [unity.enum.fullScreenMode.FullScreenWindow] = tm.l10n.GetString("fullscreen_mode_fullscreen_window"),
            [unity.enum.fullScreenMode.MaximizedWindow] = tm.l10n.GetString("fullscreen_mode_maximized_window"),
            [unity.enum.fullScreenMode.Windowed] = tm.l10n.GetString("fullscreen_mode_windowed")
        }
        InitializeOneLocalizedDropdown("fullscreen-mode", optionsPanel.fullScreenDisplayString)
        
        optionsPanel.beatMarkersDisplayString = {
            Hidden = tm.l10n.GetString("beat_markers_hidden"),
            ShowBeatMarkers = tm.l10n.GetString("beat_markers_show_beat_markers"),
            ShowHalfBeatMarkers = tm.l10n.GetString("beat_markers_show_half_beat_markers")
        }
        InitializeOneLocalizedDropdown("beat-markers", optionsPanel.beatMarkersDisplayString)

        optionsPanel.bgScalingDisplayString = {
            FillEntireScreen = tm.l10n.GetString("bg_scaling_fill_entire_screen"),
            FillGameArea = tm.l10n.GetString("bg_scaling_fill_game_area")
        }
        InitializeOneLocalizedDropdown("background-scaling", optionsPanel.bgScalingDisplayString)

        optionsPanel.rulesetDisplayString = {
            [tm.enum.ruleset.Standard] = tm.l10n.GetString("ruleset_standard"),
            [tm.enum.ruleset.Legacy] = tm.l10n.GetString("ruleset_legacy"),
            [tm.enum.ruleset.Custom] = tm.l10n.GetString("ruleset_custom")
        }
        InitializeOneLocalizedDropdown("ruleset", optionsPanel.rulesetDisplayString)
    end

    local panel = optionsPanel.panel
    InitializeLocalizedDropdowns(panel)
    table.insert(callbacksOnLocaleChange, function()
        InitializeLocalizedDropdowns(panel)
    end)
    panel.display = false

    local resolutionDropdown = panel.Q("resolution").Q("dropdown")
    local resolutionChoices = {}
    for i, resolution in ipairs(unity.screen.resolutions) do
        table.insert(resolutionChoices, resolution.ToString())
    end
    resolutionDropdown.choices = resolutionChoices
    resolutionDropdown.RegisterCallback(eventType.ChangeString, function(element, event)
        for _, resolution in ipairs(unity.screen.resolutions) do
            if (resolution.ToString() == event.newValue) then
                tm.options.width = resolution.width
                tm.options.height = resolution.height
                tm.options.refreshRateNumerator = resolution.refreshRateRatio.numerator
                tm.options.refreshRateDenominator = resolution.refreshRateRatio.denominator
                break
            end
        end
        tm.options.ApplyGraphicSettings()
    end)

    local fullScreenDropdown = panel.Q("fullscreen-mode").Q("dropdown")
    fullScreenDropdown.RegisterCallback(eventType.ChangeString, function(element, event)
        tm.options.fullScreenMode = KeyFromValue(optionsPanel.fullScreenDisplayString, event.newValue)
        tm.options.ApplyGraphicSettings()
    end)

    local vSyncToggle = panel.Q("vsync").Q("track")
    vSyncToggle.RegisterCallback(eventType.Click, function()
        tm.options.vSync = not tm.options.vSync
        tm.options.ApplyGraphicSettings()
    end)

    commonUI.InitializeVolumeSliders(panel)

    local audioBufferDropdown = panel.Q("audio-buffer-size").Q("dropdown")
    audioBufferDropdown.choices = {"128", "256", "512", "1024"}
    audioBufferDropdown.RegisterCallback(eventType.ChangeString, function(element, event)
        tm.options.audioBufferSize = net.int.Parse(event.newValue)
        tm.options.ApplyAudioBufferSize()
    end)

    local languageDropdown = panel.Q("language").Q("dropdown")
    local languageChoices = {}
    local languageChoiceToLocaleName = {}
        for localeName, locale in pairs(tm.l10n.GetAllLocales()) do
            table.insert(languageChoices, locale.languageName)
            languageChoiceToLocaleName[locale.languageName] = localeName
        end
    languageDropdown.choices = languageChoices
    languageDropdown.RegisterCallback(eventType.ChangeString, function(element, event)
        tm.options.locale = languageChoiceToLocaleName[event.newValue]
        tm.l10n.ApplyLocale()
        for _, callback in ipairs(callbacksOnLocaleChange) do
            callback()
        end
        optionsPanel.Show()
    end)

    local skinsButton = panel.Q("skins").Q("button")
    skinsButton.RegisterCallback(eventType.Click, function()
    end)

    function InitializeThemeOptionToggle(containerName, key)
        local toggle = panel.Q(containerName).Q("track")
        toggle.RegisterCallback(eventType.Click, function()
            local oldValue = themeOptions[key]
            local newValue = ""
            if (oldValue == "True") then
                newValue = "False"
            else
                newValue = "True"
            end
            themeOptions[key] = newValue
        end)
    end
    InitializeThemeOptionToggle("show-loading-bar", "showLoadingBar")
    InitializeThemeOptionToggle("show-fps", "showFps")
    InitializeThemeOptionToggle("show-judgement-tally", "showJudgementTally")
    InitializeThemeOptionToggle("show-lane-dividers", "showLaneDividers")

    function InitializeThemeOptionDropdown(containerName, key, stringTable)
        local dropdown = panel.Q(containerName).Q("dropdown")
        dropdown.RegisterCallback(eventType.ChangeString, function(element, event)
            enum = KeyFromValue(stringTable, event.newValue)
            themeOptions[key] = enum
        end)
    end
    InitializeThemeOptionDropdown("beat-markers", "beatMarkers", optionsPanel.beatMarkersDisplayString)
    InitializeThemeOptionDropdown("background-scaling", "backgroundScalingMode", optionsPanel.bgScalingDisplayString)

    local rulesetDropdown = panel.Q("ruleset").Q("dropdown")
    rulesetDropdown.RegisterCallback(eventType.ChangeString, function(element, event)
        tm.options.ruleset = KeyFromValue(optionsPanel.rulesetDisplayString, event.newValue)
        if (tm.options.ruleset == tm.enum.ruleset.Custom) then
            local status = tm.ruleset.LoadCustomRuleset()
            if (not status.ok) then
                local errorFormat = tm.l10n.GetString("custom_ruleset_not_found_error_format")
                local path = tm.paths.EscapeBackslash(tm.paths.GetRulesetFilePath())
                local error = net.string.Format(errorFormat, path)
                alertBox.Alert(error)
                tm.options.ruleset = tm.enum.ruleset.Standard
                rulesetDropdown.SetValueWithoutNotify(optionsPanel.rulesetDisplayString[tm.enum.ruleset.Standard])
            end
        end
    end)

    local customLocationToggle = panel.Q("custom-data-location").Q("track")
    customLocationToggle.RegisterCallback(eventType.Click, function()
        tm.options.customDataLocation = not tm.options.customDataLocation
        selectTrackPanel.needsRefresh = true
        optionsPanel.UpdateCustomDataLocationDisplay()
    end)

    local tracksFolderButton = panel.Q("tracks-folder-location").Q("button")
    tracksFolderButton.RegisterCallback(eventType.Click, function()
        local newFolder = tm.OpenSelectFolderDialog("", tm.options.tracksFolderLocation)
        if (newFolder != nil) then
            tm.options.tracksFolderLocation = newFolder;
            tm.paths.ApplyCustomDataLocation()
            selectTrackPanel.needsRefresh = true
            optionsPanel.UpdateCustomDataLocationDisplay()
        end
    end)
    local skinsFolderButton = panel.Q("skins-folder-location").Q("button")
    skinsFolderButton.RegisterCallback(eventType.Click, function()
        local newFolder = tm.OpenSelectFolderDialog("", tm.options.skinsFolderLocation)
        if (newFolder != nil) then
            tm.options.skinsFolderLocation = newFolder;
            tm.paths.ApplyCustomDataLocation()
            optionsPanel.UpdateCustomDataLocationDisplay()
        end
    end)

    InitializeThemeOptionToggle("pause-when-lose-focus", "pauseWhenGameLosesFocus")

    local discordRichPresenceToggle = panel.Q("discord-rich-presence").Q("track")
    discordRichPresenceToggle.RegisterCallback(eventType.Click, function()
        if (controls.IsToggleOn(discordRichPresenceToggle)) then
            tm.options.TurnOnDiscordRichPresence()
            -- TODO: call tm.SetDiscordActivity(string details, string state, bool showElapsedTime)
        else
            tm.options.TurnOffDiscordRichPresence()
        end
    end)
end

InitializeThemeOptions()
optionsPanel.Initialize()