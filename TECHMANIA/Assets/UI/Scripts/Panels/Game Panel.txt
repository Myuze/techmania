gamePanel = {
    panel = tm.root.Q("game-panel")
}

pauseMenu = {
    bg = gamePanel.panel.Q("pause-menu-bg"),
    menu = gamePanel.panel.Q("pause-menu")
}

gamePanel.Initialize = function()
    local panel = gamePanel.panel

    panel.RegisterCallback(eventType.KeyDown, function(element, event)
        if (event.keyCode == unity.enum.keyCode.Escape) then
            if (tm.game.state == tm.enum.gameState.Paused) then
                gamePanel.Unpause()
            elseif (tm.game.state == tm.enum.gameState.Ongoing) then
                gamePanel.Pause()
            end
        end
        if (event.keyCode == unity.enum.keyCode.Space or
            event.keyCode == unity.enum.keyCode.Backspace) then
        end
    end)

    panel.Q("pause-button").RegisterCallback(eventType.Click, function()
        gamePanel.Pause()
    end)

    panel.Q("fever-bar-bg").RegisterCallback(eventType.PointerDown, function()
    end)

    -- TODO: update Fever instruction based on control scheme

    tm.gameSetup.bgContainer = panel.Q("bg-layer")
    tm.gameSetup.gameContainer = panel.Q("game-layer")
    tm.gameSetup.vfxComboContainer = nil  -- Unused
    tm.gameSetup.assistTick = util.io.LoadAudioFromTheme("Assets/UI/SFX/Assist Tick.wav")

    tm.gameSetup.onLoadProgress = function(progress)
        local percent = progress.filesLoaded * 100 / progress.totalFiles
        controls.SetProgressBar(panel.Q("loading-progress"), percent)
    end

    tm.gameSetup.onLoadError = function(status)
        tm.game.Conclude()
        alertBox.Alert(status.errorMessage, nil, function()
            GamePanelToSelectTrackPanel()
        end)
    end

    tm.gameSetup.onLoadComplete = function()
        gamePanel.BeginGame()
    end

    tm.gameSetup.onUpdate = function()
    end

    tm.gameSetup.onNoteResolved = function()
    end

    tm.gameSetup.onAllNotesResolved = function()
    end

    tm.gameSetup.onFeverUpdate = function(fever)
    end

    tm.gameSetup.onFeverEnd = function(feverBonus)
    end
end

gamePanel.StartLoading = function()
    local panel = gamePanel.panel

    panel.Q("top-bar").visible = false  -- Cannot turn off display as it influences #remaining-space
    panel.Q("top-bar").Q("pause-button").display = true
    panel.Q("top-bar").Q("back-button").display = false
    panel.Q("top-bar").Q("regular-top-bar").display = tm.options.modifiers.mode != tm.enum.mode.Practice
    panel.Q("top-bar").Q("practice-top-bar").display = tm.options.modifiers.mode == tm.enum.mode.Practice
    panel.Q("middle-fever-bar-bg").display = false
    panel.Q("loading-bar-wrap").display = themeOptions.Get("showLoadingBar") == "True"
    panel.InsertChild(0, panel.Q("bg-layer"))
    pauseMenu.bg.display = false

    -- TODO: respond to showFps option
    -- TODO: respond to showJudgementTally option
    -- TODO: respond to showLaneDividers option
    -- TODO: respond to beatMarkers option

    tm.options.TemporarilyDisableVSync()
    
    -- tm.game.BeginLoading() will be called by navigation,
    -- after the game panel becomes visible.
end

gamePanel.BeginGame = function()
    local panel = gamePanel.panel
    if (themeOptions.Get("backgroundScalingMode") == "FillGameArea") then
        panel.Q("remaining-space").InsertChild(0, panel.Q("bg-layer"))
    end

    panel.Q("top-bar").visible = true
    panel.Q("middle-fever-bar-bg").display = true
    panel.Q("loading-bar-wrap").display = false

    tm.options.RestoreVSync()
    tm.game.Begin()

    -- Give game panel focus so it can receive keyboard events
    panel.Focus()
end

gamePanel.Pause = function()
    if (tm.game.state != tm.enum.gameState.Ongoing) then return end

    local bg = pauseMenu.bg
    local menu = pauseMenu.menu
    tm.audio.Play(util.io.LoadAudioFromTheme("Assets/UI/SFX/Pause.wav"), tm.enum.audioChannel.SFX)
    tm.game.Pause()
    FadeInDialog(bg, menu)
    pauseMenu.Show()
end

gamePanel.Unpause = function()
    local bg = pauseMenu.bg
    local menu = pauseMenu.menu
    FadeOutDialog(bg, menu, function()
        -- Only unpause after the menu has fully faded out.
        tm.game.Unpause()
    end)
end

pauseMenu.Initialize = function()
    local panel = gamePanel.panel
    local bg = pauseMenu.bg
    local menu = pauseMenu.menu

    menu.RegisterCallback(eventType.Click, function(element, event)
        -- Prevents bg from receiving this event on the bubble up phase
        event.StopPropagation()
    end)

    function OnCancel()
        gamePanel.Unpause()
    end
    menu.Q("resume-button").RegisterCallback(eventType.Click, OnCancel)
    bg.RegisterCallback(eventType.Click, OnCancel)
    bg.RegisterCallback(eventType.Click, function(_, _)
        tm.audio.Play(util.io.LoadAudioFromTheme("Assets/UI/SFX/Back.wav"), tm.enum.audioChannel.SFX)
    end)

    menu.Q("restart-button").RegisterCallback(eventType.Click, function()
        tm.game.Conclude()
        gamePanel.StartLoading()
        tm.game.BeginLoading()
    end)

    menu.Q("select-track-button").RegisterCallback(eventType.Click, function()
        GamePanelToSelectTrackPanel()
    end)

    commonUI.InitializeBgBrightnessSlider(menu.Q("bg-brightness-wrap"))
    commonUI.InitializeVolumeSliders(menu)
end

pauseMenu.Show = function()
    commonUI.ShowBgBrightnessSlider(pauseMenu.menu.Q("bg-brightness-wrap"))
    commonUI.ShowVolumeSliders(pauseMenu.menu)
end

gamePanel.Initialize()
pauseMenu.Initialize()