gamePanel = {
    panel = tm.root.Q("game-panel"),
    feverReadyCoroutine = nil,
    feverBonusCoroutine = nil
}

pauseMenu = {
    bg = gamePanel.panel.Q("pause-menu-bg"),
    menu = gamePanel.panel.Q("pause-menu")
}

function FillBar(barElement, amount)
    barElement.style.width = StyleLengthInPercent(amount * 100)
end

gamePanel.Initialize = function()
    local panel = gamePanel.panel

    panel.RegisterCallback(eventType.KeyDown, function(element, event)
        if (event.keyCode == unity.enum.keyCode.Escape) then
            if (tm.game.state == tm.enum.gameState.Paused) then
                gamePanel.Unpause()
            elseif (tm.game.state == tm.enum.gameState.Ongoing) then
                gamePanel.Pause()
            end
        end
        if (event.keyCode == unity.enum.keyCode.Space or
            event.keyCode == unity.enum.keyCode.Backspace) then
            gamePanel.ActivateFever()
        end
        if (event.keyCode == unity.enum.keyCode.P) then
            tm.StartCoroutine(function()
                local gameLayer = panel.Q("game-layer")
                gameLayer.style.scale = unity.styleScale.__new(unity.vector2.__new(0.51, 0.51))
                local angleDegrees = 0
                while (true) do
                    gameLayer.style.rotate = unity.styleRotate.__new(unity.rotate.__new(unity.angle.Degrees(angleDegrees)))
                    angleDegrees = angleDegrees + unity.time.deltaTime * 60
                    coroutine.yield()
                end
            end)
        end
    end)

    panel.Q("pause-button").RegisterCallback(eventType.Click, function()
        gamePanel.Pause()
    end)

    panel.Q("fever-bar-bg").RegisterCallback(eventType.PointerDown, function()
        gamePanel.ActivateFever()
    end)

    tm.gameSetup.bgContainer = panel.Q("bg-layer")
    tm.gameSetup.gameContainer = panel.Q("game-layer")
    tm.gameSetup.vfxComboContainer = nil  -- Unused
    tm.gameSetup.assistTick = util.io.LoadAudioFromTheme("Assets/UI/SFX/Assist Tick.wav")

    tm.gameSetup.onLoadProgress = function(progress)
        local percent = progress.filesLoaded * 100 / progress.totalFiles
        controls.SetProgressBar(panel.Q("loading-progress"), percent)
    end

    tm.gameSetup.onLoadError = function(status)
        tm.game.Conclude()
        alertBox.Alert(status.errorMessage, nil, function()
            GamePanelToSelectTrackPanel()
        end)
    end

    tm.gameSetup.onLoadComplete = function()
        gamePanel.BeginGame()
    end

    tm.gameSetup.onUpdate = function(timer)
        -- TODO: update FPS display.
    end

    tm.gameSetup.onNoteResolved = function(note, judgement, scoreKeeper)
        gamePanel.UpdateHpDisplay(scoreKeeper.hp, scoreKeeper.maxHp)
        gamePanel.UpdateScoreDisplay(
            scoreKeeper.score.CurrentScore(),
            scoreKeeper.maxCombo)
        -- TODO: update judgement tally.
    end

    tm.gameSetup.onAllNotesResolved = function(scoreKeeper)
        -- Do nothing.
    end

    tm.gameSetup.onComboTick = function(newCombo)
        local scoreKeeper = tm.game.scoreKeeper
        gamePanel.UpdateScoreDisplay(
            scoreKeeper.score.CurrentScore(),
            scoreKeeper.maxCombo)
    end

    tm.gameSetup.onFeverReady = function()
        if (gamePanel.feverReadyCoroutine != nil) then
            tm.StopCoroutine(gamePanel.feverReadyCoroutine)
        end

        -- Play the "Fever ready" animation.
        gamePanel.feverReadyCoroutine = tm.StartCoroutine(function()
            local feverBarBg = gamePanel.panel.Q("top-bar").Q("fever-bar-bg")
            local highlight = feverBarBg.Q("highlight")
            local feverOff = feverBarBg.Q("fever-off-text")
            local feverReady = feverBarBg.Q("fever-ready-text")
            local instructionTouch = feverBarBg.Q("fever-instruction-touch")
            local instructionKeysKm = feverBarBg.Q("fever-instruction-keys-km")

            function OneFlash()
                local fadeTimer = 0.5
                local timer = 0
                local maxHighlightOpacity = 0.38
                highlight.style.opacity = StyleFloat(maxHighlightOpacity)
                while (timer < fadeTimer) do
                    local progress = timer / fadeTimer
                    highlight.style.opacity = StyleFloat(unity.mathf.SmoothStep(maxHighlightOpacity, 0, progress))
                    timer = timer + unity.time.deltaTime
                    coroutine.yield()
                end
                highlight.style.opacity = StyleFloat(0)
                timer = 0
                while (timer < fadeTimer) do
                    local progress = timer / fadeTimer
                    highlight.style.opacity = StyleFloat(unity.mathf.SmoothStep(0, maxHighlightOpacity, progress))
                    timer = timer + unity.time.deltaTime
                    coroutine.yield()
                end
                highlight.style.opacity = StyleFloat(0)
            end

            while (true) do
                feverOff.display = false
                feverReady.display = true
                instructionTouch.display = false
                instructionKeysKm.display = false

                OneFlash()

                feverOff.display = false
                feverReady.display = false
                instructionTouch.display = selectPatternPanel.selectedPattern.patternMetadata.controlScheme == tm.enum.controlScheme.Touch
                instructionKeysKm.display = selectPatternPanel.selectedPattern.patternMetadata.controlScheme != tm.enum.controlScheme.Touch

                OneFlash()
            end
        end)

        -- Show "Fever" on middle bar.
        panel.Q("middle-fever-bar-bg").Q("fever-ready-text").display = true
    end

    tm.gameSetup.onFeverUnready = function()
        gamePanel.ShowFeverOff()
    end

    tm.gameSetup.onFeverActivated = function()
        tm.audio.Play(util.io.LoadAudioFromTheme("Assets/UI/SFX/Fever.wav"), tm.enum.audioChannel.SFX)
        gamePanel.ShowFeverOff()
    end

    tm.gameSetup.onFeverUpdate = function(feverAmount)
        gamePanel.UpdateFeverDisplay(feverAmount)
    end

    tm.gameSetup.onFeverEnd = function(feverBonus)
        gamePanel.ShowFeverOff()
        gamePanel.feverBonusCoroutine = tm.StartCoroutine(function()
            local bonusDisplay = gamePanel.panel.Q("middle-fever-bar-bg").Q("fever-bonus")
            -- TODO: localize this
            bonusDisplay.text = "FEVER BONUS   +" .. tostring(feverBonus)
            bonusDisplay.display = true
            WaitForSeconds(2)
            bonusDisplay.display = false
        end)
    end

    tm.gameSetup.onStageClear = function(scoreKeeper)
        print("Stage clear")
        GamePanelToSelectTrackPanel()
        -- TODO: transition to result panel
    end

    tm.gameSetup.onStageFailed = function(scoreKeeper)
        print("Stage failed")
        GamePanelToSelectTrackPanel()
        -- TODO: show "stage failed" screen, then transition to result panel
    end
end

gamePanel.StartLoading = function()
    local panel = gamePanel.panel

    panel.Q("top-bar").visible = false  -- Cannot turn off display as it influences #remaining-space
    panel.Q("top-bar").Q("pause-button").display = true
    panel.Q("top-bar").Q("back-button").display = false
    panel.Q("top-bar").Q("regular-top-bar").display = tm.options.modifiers.mode != tm.enum.mode.Practice
    panel.Q("top-bar").Q("practice-top-bar").display = tm.options.modifiers.mode == tm.enum.mode.Practice
    panel.Q("fps-display").display = false
    panel.Q("judgement-tally").display = false
    panel.Q("middle-fever-bar-bg").display = false
    panel.Q("loading-bar-wrap").display = themeOptions["showLoadingBar"] == "True"
    panel.InsertChild(0, panel.Q("bg-layer"))
    pauseMenu.bg.display = false

    -- TODO: respond to showLaneDividers option
    -- TODO: respond to beatMarkers option

    tm.options.TemporarilyDisableVSync()
    
    -- tm.game.BeginLoading() will be called by navigation,
    -- after the game panel becomes visible.
end

gamePanel.BeginGame = function()
    local panel = gamePanel.panel

    -- Relocate game area if necessary.
    local scalingMode = themeOptions["backgroundScalingMode"]
    local bgLayer = panel.Q("bg-layer")
    if (scalingMode == "FillEntireScreen" and
        bgLayer.parent.Equals(panel.Q("remaining-space"))) then
        panel.InsertChild(0, panel.Q("bg-layer"))
    elseif (scalingMode == "FillGameArea" and
        bgLayer.parent.Equals(panel)) then
        panel.Q("remaining-space").InsertChild(0, panel.Q("bg-layer"))
    end

    local topBar = panel.Q("top-bar")
    topBar.visible = true
    gamePanel.UpdateHpDisplay(1, 1)
    topBar.Q("no-fail-indicator").display = tm.options.modifiers.mode == tm.enum.mode.NoFail
    gamePanel.UpdateScoreDisplay(0, 0)
    gamePanel.UpdateFeverDisplay(0)
    gamePanel.ShowFeverOff()
    panel.Q("middle-fever-bar-bg").Q("fever-bonus").display = false

    panel.Q("fps-display").display = themeOptions["showFps"] == "True"
    panel.Q("judgement-tally").display = themeOptions["showJudgementTally"] == "True"

    panel.Q("loading-bar-wrap").display = false

    tm.options.RestoreVSync()
    tm.game.Begin()

    -- Give game panel focus so it can receive keyboard events.
    panel.Focus()
end

gamePanel.Pause = function()
    if (tm.game.state != tm.enum.gameState.Ongoing) then return end

    local bg = pauseMenu.bg
    local menu = pauseMenu.menu
    tm.audio.Play(util.io.LoadAudioFromTheme("Assets/UI/SFX/Pause.wav"), tm.enum.audioChannel.SFX)
    tm.game.Pause()
    FadeInDialog(bg, menu)
    pauseMenu.Show()
end

gamePanel.Unpause = function()
    local bg = pauseMenu.bg
    local menu = pauseMenu.menu
    FadeOutDialog(bg, menu, function()
        -- Only unpause after the menu has fully faded out.
        tm.game.Unpause()
    end)
end

gamePanel.ActivateFever = function()
    if (tm.game.state != tm.enum.gameState.Ongoing) then return end
    if (tm.game.scoreKeeper.feverState != tm.enum.feverState.Ready) then return end
    tm.game.ActivateFever()
end

gamePanel.UpdateHpDisplay = function(hp, maxHp)
    FillBar(gamePanel.panel.Q("top-bar").Q("hp-bar"), hp / maxHp)
end

gamePanel.UpdateScoreDisplay = function(score, maxCombo)
    local topBar = gamePanel.panel.Q("top-bar")
    topBar.Q("score-value").text = tostring(score)
    topBar.Q("max-combo-value").text = tostring(maxCombo)
end

gamePanel.UpdateFeverDisplay = function(fever)
    FillBar(gamePanel.panel.Q("top-bar").Q("fever-bar"), fever)
    FillBar(gamePanel.panel.Q("middle-fever-bar"), fever)
end

gamePanel.ShowFeverOff = function()
    if (gamePanel.feverReadyCoroutine != nil) then
        tm.StopCoroutine(gamePanel.feverReadyCoroutine)
        gamePanel.feverReadyCoroutine = nil
    end

    local topBar = gamePanel.panel.Q("top-bar")

    local feverBarBg = topBar.Q("fever-bar-bg")
    feverBarBg.Q("highlight").style.opacity = StyleFloat(0)
    feverBarBg.Q("fever-off-text").display = true
    feverBarBg.Q("fever-ready-text").display = false
    feverBarBg.Q("fever-instruction-touch").display = false
    feverBarBg.Q("fever-instruction-keys-km").display = false

    local middleFeverBarBg = gamePanel.panel.Q("middle-fever-bar-bg")
    middleFeverBarBg.display = true
    middleFeverBarBg.Q("fever-ready-text").display = false
    -- Does not control Fever bonus.
end

pauseMenu.Initialize = function()
    local panel = gamePanel.panel
    local bg = pauseMenu.bg
    local menu = pauseMenu.menu

    menu.RegisterCallback(eventType.Click, function(element, event)
        -- Prevents bg from receiving this event on the bubble up phase
        event.StopPropagation()
    end)

    function OnCancel()
        gamePanel.Unpause()
    end
    menu.Q("resume-button").RegisterCallback(eventType.Click, OnCancel)
    bg.RegisterCallback(eventType.Click, OnCancel)
    bg.RegisterCallback(eventType.Click, function(_, _)
        tm.audio.Play(util.io.LoadAudioFromTheme("Assets/UI/SFX/Back.wav"), tm.enum.audioChannel.SFX)
    end)

    menu.Q("restart-button").RegisterCallback(eventType.Click, function()
        tm.game.Conclude()
        gamePanel.StartLoading()
        tm.game.BeginLoading()
    end)

    menu.Q("select-track-button").RegisterCallback(eventType.Click, function()
        GamePanelToSelectTrackPanel()
    end)

    commonUI.InitializeBgBrightnessSlider(menu.Q("bg-brightness-wrap"))
    commonUI.InitializeVolumeSliders(menu)
end

pauseMenu.Show = function()
    commonUI.ShowBgBrightnessSlider(pauseMenu.menu.Q("bg-brightness-wrap"))
    commonUI.ShowVolumeSliders(pauseMenu.menu)
end

gamePanel.Initialize()
pauseMenu.Initialize()