function InitializeGamePanel(tm)
    local panel = tm.root.Q("game-panel")

    panel.Q("pause-button").RegisterCallback("Click", function()
        if (tm.game.state != "Ongoing") then return end
        tm.audio.Play(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Pause.wav"), "SFX")
        tm.game.Pause()
        FadeInDialog(panel.Q("pause-menu-bg"), panel.Q("pause-menu"))
        ShowPauseMenu(panel.Q("pause-menu"))
    end)

    panel.Q("fever-bar-bg").RegisterCallback("PointerDown", function()
    end)

    tm.gameSetup.bgContainer = panel.Q("bg-layer")
    tm.gameSetup.gameContainer = panel.Q("game-layer")
    tm.gameSetup.vfxComboContainer = nil  -- Unused

    tm.gameSetup.onLoadProgress = function(progress)
        local percent = progress.filesLoaded * 100 / progress.totalFiles
        SetProgressBar(panel.Q("loading-progress"), percent)
    end

    tm.gameSetup.onLoadError = function(status)
        tm.game.Conclude()
        Alert(status.errorMessage, nil, function()
            GamePanelToSelectTrackPanel(tm)
        end)
    end

    tm.gameSetup.onLoadComplete = function()
        GamePanelBeginGame(tm, panel)
    end

    tm.gameSetup.onUpdate = function()
    end

    tm.gameSetup.onNoteResolved = function()
    end

    tm.gameSetup.onAllNotesResolved = function()
    end

    tm.gameSetup.onFeverUpdate = function(fever)
    end

    tm.gameSetup.onFeverEnd = function(feverBonus)
    end
end

function InitializePauseMenu(tm)
    local bg = tm.root.Q("pause-menu-bg")
    local menu = bg.Q("pause-menu")

    menu.RegisterCallback("Click", function(element, event)
        -- Prevents bg from receiving this event on the bubble up phase
        event.StopPropagation()
    end)

    function OnCancel()
        FadeOutDialog(bg, menu, function()
            -- Only unpause after the menu has fully faded out.
            tm.game.Unpause()
        end)
    end
    menu.Q("resume-button").RegisterCallback("Click", OnCancel)
    bg.RegisterCallback("Click", OnCancel)
    bg.RegisterCallback("Click", function(_, _)
        tm.audio.Play(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Back.wav"), "SFX")
    end)

    menu.Q("restart-button").RegisterCallback("Click", function()
        tm.game.Conclude()
        GamePanelStartLoading(tm)
    end)

    menu.Q("select-track-button").RegisterCallback("Click", function()
        tm.game.Conclude()
        GamePanelToSelectTrackPanel(tm)
    end)

    InitializeBgBrightnessSlider(tm, menu.Q("bg-brightness-wrap"))
    InitializeVolumeSliders(menu)
end

function ShowPauseMenu(menu)
    ShowBgBrightnessSlider(menu.Q("bg-brightness-wrap"))
    ShowVolumeSliders(menu)
end

function GamePanelStartLoading(tm)
    local panel = tm.root.Q("game-panel")

    panel.Q("top-bar").visible = false  -- Cannot turn off display as it influences #remaining-space
    panel.Q("top-bar").Q("pause-button").display = true
    panel.Q("top-bar").Q("back-button").display = false
    panel.Q("top-bar").Q("regular-top-bar").display = tm.options.modifiers.mode != "Practice"
    panel.Q("top-bar").Q("practice-top-bar").display = tm.options.modifiers.mode == "Practice"
    panel.Q("middle-fever-bar-bg").display = false
    panel.Q("loading-bar-wrap").display = themeOptions.Get("showLoadingBar") == "True"
    panel.InsertChild(0, panel.Q("bg-layer"))
    panel.Q("pause-menu-bg").display = false

    -- TODO: respond to showFps option
    -- TODO: respond to showJudgementTally option
    -- TODO: respond to showLaneDividers option
    -- TODO: respond to beatMarkers option

    tm.options.TemporarilyDisableVSync()
    tm.game.BeginLoading()
end

function GamePanelBeginGame(tm, panel)
    if (themeOptions.Get("backgroundScalingMode") == "FillGameArea") then
        panel.Q("remaining-space").InsertChild(0, panel.Q("bg-layer"))
    end

    panel.Q("top-bar").visible = true
    panel.Q("middle-fever-bar-bg").display = true
    panel.Q("loading-bar-wrap").display = false

    tm.options.RestoreVSync()
    tm.game.Begin()
end

InitializeGamePanel(tm)
InitializePauseMenu(tm)