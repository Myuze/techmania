selectTrackPanelLocation = ""
trackListNeedsRefresh = false
trackListFilterKeywords = {}
trackListFilterKeywordsPreSplit = ""
showTracksInAllFolders = false
-- Possible values: Title, Artist, Genre, Touch, Keys, KM
trackListSortBasis = "Title"
-- key: enum, value: display string
trackListSortBasisDisplayString = {}
trackListSortAscending = true

selectedTrackFolder = ""
selectedFullTrack = nil

function ClearAllTrackCards(tm)
    local panel = tm.root.Q("select-track-panel")

    local subfolderContainer = panel.Q("subfolder-container")
    for _, child in ipairs(subfolderContainer.Children()) do
        child.RemoveFromHierarchy()
    end

    local trackContainer = panel.Q("track-container")
    for _, child in ipairs(trackContainer.Children()) do
        child.RemoveFromHierarchy()
    end
end

function CompareTracks(t1, t2)
    local basis1, basis2

    function FindBasisPatternLevel(track, controlScheme)
        -- When ascending, this looks for the lowest level.
        -- When descending, this looks for the highest level.

        local basis
        -- Tracks without any pattern in the specified scheme are sorted last.
        if (trackListSortAscending) then
            basis = 65536
        else
            basis = -65536
        end

        for _, pattern in ipairs(track.patterns) do
            if (pattern.patternMetadata.controlSchemeString == controlScheme) then
                local level = pattern.patternMetadata.level
                if ((trackListSortAscending and level < basis) or
                    (not trackListSortAscending and level > basis)) then
                    basis = level
                end
            end
        end

        return basis
    end

    if (trackListSortBasis == "Title") then
        basis1 = t1.trackMetadata.title
        basis2 = t2.trackMetadata.title
    elseif (trackListSortBasis == "Artist") then
        basis1 = t1.trackMetadata.artist
        basis2 = t2.trackMetadata.artist
    elseif (trackListSortBasis == "Genre") then
        basis1 = t1.trackMetadata.genre
        basis2 = t2.trackMetadata.genre
    else
        basis1 = FindBasisPatternLevel(t1, trackListSortBasis)
        basis2 = FindBasisPatternLevel(t2, trackListSortBasis)
    end

    if (trackListSortAscending) then
        return basis1 < basis2
    else
        return basis1 > basis2
    end
end

function ShowTracksAtCurrentLocation(tm)
    local panel = tm.root.Q("select-track-panel")

    if (showTracksInAllFolders) then
        selectTrackPanelLocation = util.paths.GetTrackRootFolder()
    end

    panel.Q("location-display").text = util.paths.EscapeBackslash(selectTrackPanelLocation)
    panel.Q("up-button").SetEnabled(selectTrackPanelLocation != util.paths.GetTrackRootFolder())

    local subfolderContainer = panel.Q("subfolder-container")
    local trackContainer = panel.Q("track-container")
    ClearAllTrackCards(tm)

    local anythingInFolder = false
    local hiddenTracks = 0

    -- Prepare the subfolder list, track list and error list.
    local subfolders = {}
    local tracksInFolder = {}
    local tracksWithError = {}
    if (showTracksInAllFolders) then
        function SearchAndProcessFolder(folder)
            for _, trackInFolder in ipairs(tm.resources.GetTracksInFolder(folder)) do
                table.insert(tracksInFolder, trackInFolder)
            end
            for _, trackWithError in ipairs(tm.resources.GetTracksWithError(folder)) do
                table.insert(tracksWithError, trackWithError)
            end
            for _, subfolder in ipairs(tm.resources.GetSubfolders(folder)) do
                SearchAndProcessFolder(subfolder.fullPath)
            end
        end
        SearchAndProcessFolder(selectTrackPanelLocation)
    else
        subfolders = tm.resources.GetSubfolders(selectTrackPanelLocation)
        tracksInFolder = tm.resources.GetTracksInFolder(selectTrackPanelLocation)
        tracksWithError = tm.resources.GetTracksWithError(selectTrackPanelLocation)
    end

    -- Render lists as cards.
    table.sort(subfolders, function(s1, s2)
        return s1.name < s2.name
    end)
    for _, subfolder in ipairs(subfolders) do
        anythingInFolder = true
        local card = subfolderContainer.InstantiateTemplate("Assets/UI/Templates/Subfolder Card.uxml").Q("subfolder-card")
        if (subfolder.eyecatchFullPath != nil) then
            LoadAndShowEyecatch(tm, subfolder.eyecatchFullPath, card.Q("eyecatch"))
        end
        SetUpButtonSounds(tm, card)
        card.Q("name").text = util.paths.EscapeBackslash(subfolder.name)
        SetUpScrollingText(tm, card.Q("name-container"))
        card.RegisterCallback("Click", function(_, _, subfolder)
            selectTrackPanelLocation = subfolder.fullPath
            ShowTracksAtCurrentLocation(tm)
        end, subfolder)
    end

    function TrackContainsAnyFilterKeyword(metadata)
        if (#trackListFilterKeywords == 0) then
            return true
        end

        local title = net.string.ToLower(metadata.title)
        local artist = net.string.ToLower(metadata.artist)
        local genre = net.string.ToLower(metadata.genre)
        for _, keyword in ipairs(trackListFilterKeywords) do
            if (net.string.Contains(title, keyword) or
                net.string.Contains(artist, keyword) or
                net.string.Contains(genre, keyword)) then
                return true
            end
        end

        return false
    end

    table.sort(tracksInFolder, function(trackInFolder1, trackInFolder2)
        return CompareTracks(trackInFolder1.minimizedTrack, trackInFolder2.minimizedTrack)
    end)
    local cardOfPreviouslySelectedTrack = nil
    for _, trackInFolder in ipairs(tracksInFolder) do
        anythingInFolder = true

        if (TrackContainsAnyFilterKeyword(trackInFolder.minimizedTrack.trackMetadata)) then
            local card = trackContainer.InstantiateTemplate("Assets/UI/Templates/Track Card.uxml").Q("track-card")
            card.Q("default-eyecatch").text = tm.l10n.GetString("eyecatch_no_image_text")
            card.Q("error-icon").visible = false
            local eyecatchPath = util.paths.Combine(trackInFolder.folder, trackInFolder.minimizedTrack.trackMetadata.eyecatchImage)
            LoadAndShowEyecatch(tm, eyecatchPath, card.Q("eyecatch"))
            SetUpButtonSounds(tm, card)
            card.Q("name").text = util.paths.EscapeBackslash(trackInFolder.minimizedTrack.trackMetadata.title)
            card.Q("artist").text = util.paths.EscapeBackslash(trackInFolder.minimizedTrack.trackMetadata.artist)
            SetUpScrollingText(tm, card.Q("name-container"))
            SetUpScrollingText(tm, card.Q("artist-container"))
            card.RegisterCallback("Click", function(_, _, trackInFolder)
                -- Load full track and navigate to select pattern panel.
                selectedTrackFolder = trackInFolder.folder
                local trackPath = util.paths.Combine(trackInFolder.folder, util.paths.kTrackFilename)
                selectedFullTrack = util.io.LoadFullTrack(trackPath)
                SelectTrackToSelectPatternPanel(tm)
            end, trackInFolder)

            if (selectedFullTrack != nil and
                trackInFolder.minimizedTrack.trackMetadata.guid ==
                selectedFullTrack.trackMetadata.guid) then
                cardOfPreviouslySelectedTrack = card
            end
        else
            hiddenTracks = hiddenTracks + 1
        end
    end

    for _, trackWithError in ipairs(tracksWithError) do
        anythingInFolder = true
        local card = trackContainer.InstantiateTemplate("Assets/UI/Templates/Track Card.uxml").Q("track-card")
        card.Q("eyecatch").visible = false
        card.Q("default-eyecatch").visible = false
        card.Q("error-icon").visible = true
        SetUpButtonSounds(tm, card)
        local errorMessage = ""
        if (trackWithError.type == "Load") then
            card.Q("name").text = tm.l10n.GetString("select_track_error_card_title")
            errorMessage = util.paths.EscapeBackslash(net.string.Format(tm.l10n.GetString("select_track_error_format"),
                trackWithError.status.filePath,
                trackWithError.status.errorMessage))
        elseif (trackWithError.type == "Upgrade") then
            card.Q("name").text = tm.l10n.GetString("select_track_upgrade_error_card_title")
            errorMessage = util.paths.EscapeBackslash(net.string.Format(tm.l10n.GetString("select_track_upgrade_error_format"),
                trackWithError.status.filePath,
                trackWithError.status.errorMessage))
        end
        card.Q("artist").text = tm.l10n.GetString("select_track_error_card_artist")
        SetUpScrollingText(tm, card.Q("name-container"))
        SetUpScrollingText(tm, card.Q("artist-container"))
        card.RegisterCallback("Click", function(_, _, errorMessage)
            Alert(errorMessage)
        end, errorMessage)
    end

    if (hiddenTracks > 0) then
        panel.Q("track-status").text = net.string.Format(
            tm.l10n.GetString("select_track_some_tracks_hidden_text"),
            hiddenTracks,
            trackListFilterKeywordsPreSplit)
    elseif (not anythingInFolder) then
        panel.Q("track-status").text = tm.l10n.GetString("select_track_no_track_text")
    else
        panel.Q("track-status").text = ""
    end

    if (cardOfPreviouslySelectedTrack != nil) then
        cardOfPreviouslySelectedTrack.Focus()
        -- This doesn't work even after delaying one frame. Not sure why.
        panel.Q("scroll-view").ScrollTo(cardOfPreviouslySelectedTrack)
    end
end

function ShowSelectTrackPanel(tm)
    if (trackListNeedsRefresh) then
        RefreshTrackList(tm)
        return
    end
    ShowTracksAtCurrentLocation(tm)
    tm.root.Q("select-track-panel").Q("upgrade-button").display = tm.resources.anyOutdatedTrack
end

function RefreshTrackList(tm)
    ClearAllTrackCards(tm)
    local panel = tm.root.Q("select-track-panel")
    selectTrackPanelLocation = util.paths.GetTrackRootFolder()
    trackListNeedsRefresh = false
    panel.Q("back-button").SetEnabled(false)
    panel.Q("location-display").text = util.paths.EscapeBackslash(selectTrackPanelLocation)
    util.io.ReloadTrackList(function(currentlyLoadingFile)
        panel.Q("track-status").text = util.paths.EscapeBackslash(currentlyLoadingFile)
    end,
    function(reloadStatus)
        panel.Q("back-button").SetEnabled(true)
        ShowSelectTrackPanel(tm)
    end)
end

function SetDropdownValuesInFilterSidesheet(tm)
    local sortBasisDropdown = tm.root.Q("select-track-panel").Q("filter-sidesheet").Q("sort-by").Q("dropdown")
    sortBasisDropdown.SetValueWithoutNotify(trackListSortBasisDisplayString[trackListSortBasis])
end

function ShowFilterSidesheet(tm)
    local sheet = tm.root.Q("select-track-panel").Q("filter-sidesheet")

    sheet.Q("keyword-field").Q("text-field").stringValue = trackListFilterKeywordsPreSplit

    SetToggleIsOn(sheet.Q("all-folders").Q("track"), showTracksInAllFolders)

    SetDropdownValuesInFilterSidesheet(tm)

    local ascendingRadioButton = sheet.Q("ascending-radio").Q("radio-button")
    local descendingRadioButton = sheet.Q("descending-radio").Q("radio-button")
    if (trackListSortAscending) then
        SetRadioButton(ascendingRadioButton, {ascendingRadioButton, descendingRadioButton})
    else
        SetRadioButton(descendingRadioButton, {ascendingRadioButton, descendingRadioButton})
    end
end

function FadeInFilterSidesheet(tm, bg)
    bg.display = true
    tm.StartCoroutine(function()
        FadeInCoroutine(tm, bg.Q("filter-sidesheet"), 100, 0)
    end)
end

function FadeOutFilterSidesheet(tm, bg)
    tm.StartCoroutine(function()
        FadeOutCoroutine(tm, bg.Q("filter-sidesheet"), 100, 0, function()
            bg.display = false
        end)
    end)
end

function InitializeSelectTrackPanel(tm)
    selectTrackPanelLocation = util.paths.GetTrackRootFolder()

    local panel = tm.root.Q("select-track-panel")
    panel.Q("refresh-button").RegisterCallback("Click", function()
        RefreshTrackList(tm)
    end)

    local sidesheetBg = panel.Q("filter-sidesheet-background")
    sidesheetBg.display = false
    panel.Q("filter-button").RegisterCallback("Click", function()
        if (sidesheetBg.display) then
            FadeOutFilterSidesheet(tm, sidesheetBg)
        else
            ShowFilterSidesheet(tm)
            FadeInFilterSidesheet(tm, sidesheetBg)
        end
    end)

    panel.Q("upgrade-button").RegisterCallback("Click", function()
        Confirm(tm.l10n.GetString("select_track_upgrade_version_confirmation"),
            tm.l10n.GetString("select_track_upgrade_version_confirm"),
            tm.l10n.GetString("select_track_upgrade_version_cancel"),
            function()
                ClearAllTrackCards(tm)
                panel.Q("back-button").SetEnabled(false)
                util.io.UpgradeAllTracks(function(currentlyLoadingFile)
                    panel.Q("track-status").text = util.paths.EscapeBackslash(currentlyLoadingFile)
                end,
                function(reloadStatus)
                    panel.Q("back-button").SetEnabled(true)
                    ShowSelectTrackPanel(tm)
                    if (reloadStatus.Ok()) then
                        Alert(tm.l10n.GetString("select_track_upgrade_complete_message"))
                    else
                        Alert(util.paths.EscapeBackslash(net.string.Format(
                            tm.l10n.GetString("select_track_upgrade_process_error_format"),
                            reloadStatus.errorMessage)))
                    end
                end)
            end)
    end)

    panel.Q("up-button").RegisterCallback("Click", function()
        selectTrackPanelLocation = util.paths.GoUpFrom(selectTrackPanelLocation)
        ShowTracksAtCurrentLocation(tm)
    end)

    panel.Q("open-button").RegisterCallback("Click", function()
        tm.OpenURL(selectTrackPanelLocation)
    end)
end

function InitializeTrackFilterSidesheet(tm)
    local bg = tm.root.Q("select-track-panel").Q("filter-sidesheet-background")
    bg.RegisterCallback("Click", function()
        tm.audio.Play(util.io.LoadAudioFromTheme("Assets/UI/SFX/Back.wav"), "SFX")
        FadeOutFilterSidesheet(tm, bg)
    end)

    bg.Q("filter-sidesheet").RegisterCallback("Click", function(element, event)
        -- Prevents bg from receiving this event on the bubble up phase
        event.StopPropagation()
    end)

    bg.Q("close-button").RegisterCallback("Click", function()
        FadeOutFilterSidesheet(tm, bg)
    end)

    bg.Q("keyword-field").Q("text-field").RegisterCallback("ChangeString", function(element, event)
        trackListFilterKeywordsPreSplit = net.string.Trim(event.newValue)
        local keywords = net.string.Split(trackListFilterKeywordsPreSplit, ' ')
        trackListFilterKeywords = {}
        for _, keyword in ipairs(keywords) do
            if (net.string.Length(keyword) > 0) then
                table.insert(trackListFilterKeywords, net.string.ToLower(keyword))
            end
        end
        ShowTracksAtCurrentLocation(tm)
    end)

    bg.Q("all-folders").Q("track").RegisterCallback("Click", function()
        showTracksInAllFolders = not showTracksInAllFolders
        ShowTracksAtCurrentLocation(tm)
    end)

    function LocalizeDropdown(tm)
        local bg = tm.root.Q("select-track-panel").Q("filter-sidesheet-background")
        trackListSortBasisDisplayString = {
            Title = tm.l10n.GetString("track_filter_sidesheet_sort_basis_title"),
            Artist = tm.l10n.GetString("track_filter_sidesheet_sort_basis_artist"),
            Genre = tm.l10n.GetString("track_filter_sidesheet_sort_basis_genre"),
            Touch = tm.l10n.GetString("track_filter_sidesheet_sort_basis_touch_level"),
            Keys = tm.l10n.GetString("track_filter_sidesheet_sort_basis_keys_level"),
            KM = tm.l10n.GetString("track_filter_sidesheet_sort_basis_km_level")
        }
        local sortBasisChoices = {}
        for _, display in pairs(trackListSortBasisDisplayString) do
            table.insert(sortBasisChoices, display)
        end
        local sortBasisDropdown = bg.Q("sort-by").Q("dropdown")
        sortBasisDropdown.choices = sortBasisChoices
    end
    LocalizeDropdown(tm)
    table.insert(callbacksOnLocaleChange, function()
        LocalizeDropdown(tm)
        SetDropdownValuesInFilterSidesheet(tm)
    end)
    local sortBasisDropdown = bg.Q("sort-by").Q("dropdown")
    sortBasisDropdown.RegisterCallback("ChangeString", function(element, event)
        trackListSortBasis = KeyFromValue(trackListSortBasisDisplayString, event.newValue)
        ShowTracksAtCurrentLocation(tm)
    end)

    local ascendingRadioButton = bg.Q("ascending-radio").Q("radio-button")
    local descendingRadioButton = bg.Q("descending-radio").Q("radio-button")
    ascendingRadioButton.RegisterCallback("Click", function()
        SetRadioButton(ascendingRadioButton, {ascendingRadioButton, descendingRadioButton})
        trackListSortAscending = true
        ShowTracksAtCurrentLocation(tm)
    end)
    descendingRadioButton.RegisterCallback("Click", function()
        SetRadioButton(descendingRadioButton, {ascendingRadioButton, descendingRadioButton})
        trackListSortAscending = false
        ShowTracksAtCurrentLocation(tm)
    end)
end

InitializeSelectTrackPanel(tm)
InitializeTrackFilterSidesheet(tm)