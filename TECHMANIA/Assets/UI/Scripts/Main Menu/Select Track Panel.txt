selectTrackPanelLocation = ""

function ClearAllTrackCards(tm)
    local panel = tm.root.Q("select-track-panel")

    local subfolderContainer = panel.Q("subfolder-container")
    for _, child in ipairs(subfolderContainer.Children()) do
        child.RemoveFromHierarchy()
    end

    local trackContainer = panel.Q("track-container")
    for _, child in ipairs(trackContainer.Children()) do
        child.RemoveFromHierarchy()
    end
end

function ShowTracksAtCurrentLocation(tm)
    local panel = tm.root.Q("select-track-panel")

    panel.Q("location-display").text = tm.paths.EscapeBackslash(selectTrackPanelLocation)
    panel.Q("up-button").SetEnabled(selectTrackPanelLocation != tm.paths.GetTrackRootFolder())

    local subfolderContainer = panel.Q("subfolder-container")
    local trackContainer = panel.Q("track-container")
    ClearAllTrackCards(tm)

    function HandleEyecatch(card, status, texture)
        if (status.Ok()) then
            card.Q("eyecatch").backgroundImage = texture
            card.Q("default-eyecatch").visible = false
        else
            card.Q("default-eyecatch").visible = true
        end
    end

    local subfolders = tm.resources.GetSubfolders(selectTrackPanelLocation)
    for _, subfolder in ipairs(subfolders) do
        local card = subfolderContainer.InstantiateTemplate("Assets/UI/Templates/Subfolder Card.uxml").Q("subfolder-card")
        if (subfolder.eyecatchFullPath != nil) then
            tm.io.LoadTexture(subfolder.eyecatchFullPath, function(status, texture)
                HandleEyecatch(card, status, texture)
            end)
        end
        SetUpButtonSounds(tm, card)
        card.Q("name").text = tm.paths.EscapeBackslash(subfolder.name)
        SetUpScrollingText(tm, card.Q("name-container"))
        card.RegisterCallback("Click", function(_, _, subfolder)
            selectTrackPanelLocation = subfolder.fullPath
            ShowTracksAtCurrentLocation(tm)
        end, subfolder)
    end

    local tracksInFolder = tm.resources.GetTracksInFolder(selectTrackPanelLocation)
    for _, trackInFolder in ipairs(tracksInFolder) do
        local card = trackContainer.InstantiateTemplate("Assets/UI/Templates/Track Card.uxml").Q("track-card")
        card.Q("default-eyecatch").text = tm.l10n.GetString("eyecatch_no_image_text")
        card.Q("error-icon").visible = false
        local eyecatchPath = tm.paths.Combine(trackInFolder.folder, trackInFolder.minimizedTrack.trackMetadata.eyecatchImage)
        tm.io.LoadTexture(eyecatchPath, function(status, texture)
            HandleEyecatch(card, status, texture)
        end)
        SetUpButtonSounds(tm, card)
        card.Q("name").text = tm.paths.EscapeBackslash(trackInFolder.minimizedTrack.trackMetadata.title)
        card.Q("artist").text = tm.paths.EscapeBackslash(trackInFolder.minimizedTrack.trackMetadata.artist)
        SetUpScrollingText(tm, card.Q("name-container"))
        SetUpScrollingText(tm, card.Q("artist-container"))
        card.RegisterCallback("Click", function(_, _, trackInFolder)
            print(trackInFolder.minimizedTrack.trackMetadata.title)
        end, trackInFolder)
    end

    local tracksWithError = tm.resources.GetTracksWithError(selectTrackPanelLocation)
    for _, trackWithError in ipairs(tracksWithError) do
        local card = trackContainer.InstantiateTemplate("Assets/UI/Templates/Track Card.uxml").Q("track-card")
        card.Q("eyecatch").visible = false
        card.Q("default-eyecatch").visible = false
        card.Q("error-icon").visible = true
        SetUpButtonSounds(tm, card)
        local errorMessage = ""
        if (trackWithError.type == "Load") then
            card.Q("name").text = tm.l10n.GetString("select_track_error_card_title")
            errorMessage = string.Format(tm.l10n.GetString("select_track_error_format"),
                tm.paths.EscapeBackslash(trackWithError.status.filePath),
                trackWithError.status.errorMessage)
        elseif (trackWithError.type == "Upgrade") then
            card.Q("name").text = tm.l10n.GetString("select_track_upgrade_error_card_title")
            errorMessage = string.Format(tm.l10n.GetString("select_track_upgrade_error_format"),
                tm.paths.EscapeBackslash(trackWithError.status.filePath),
                trackWithError.status.errorMessage)
        end
        card.Q("artist").text = tm.l10n.GetString("select_track_error_card_artist")
        SetUpScrollingText(tm, card.Q("name-container"))
        SetUpScrollingText(tm, card.Q("artist-container"))
        card.RegisterCallback("Click", function(_, _, errorMessage)
            Alert(errorMessage, tm.l10n.GetString("message_dialog_ok_button"))
        end, errorMessage)
    end

    panel.Q("track-status").text = ""
end

function ShowSelectTrackPanel(tm)
    ShowTracksAtCurrentLocation(tm)
end

function InitializeSelectTrackPanel(tm)
    selectTrackPanelLocation = tm.paths.GetTrackRootFolder()

    local panel = tm.root.Q("select-track-panel")
    panel.Q("refresh-button").RegisterCallback("Click", function()
        ClearAllTrackCards(tm)
        panel.Q("back-button").SetEnabled(false)
        tm.io.ReloadTrackList(function(currentlyLoadingFile)
            panel.Q("track-status").text = tm.paths.EscapeBackslash(currentlyLoadingFile)
        end,
        function(reloadStatus)
            panel.Q("back-button").SetEnabled(true)
            ShowTracksAtCurrentLocation(tm)
        end)
    end)

    panel.Q("up-button").RegisterCallback("Click", function()
        selectTrackPanelLocation = tm.paths.GoUpFrom(selectTrackPanelLocation)
        ShowTracksAtCurrentLocation(tm)
    end)

    panel.Q("open-button").RegisterCallback("Click", function()
        tm.OpenURL(selectTrackPanelLocation)
    end)
end

InitializeSelectTrackPanel(tm)