selectTrackPanelLocation = ""
trackListNeedsRefresh = false

function ClearAllTrackCards(tm)
    local panel = tm.root.Q("select-track-panel")

    local subfolderContainer = panel.Q("subfolder-container")
    for _, child in ipairs(subfolderContainer.Children()) do
        child.RemoveFromHierarchy()
    end

    local trackContainer = panel.Q("track-container")
    for _, child in ipairs(trackContainer.Children()) do
        child.RemoveFromHierarchy()
    end
end

function ShowTracksAtCurrentLocation(tm)
    local panel = tm.root.Q("select-track-panel")

    panel.Q("location-display").text = tm.paths.EscapeBackslash(selectTrackPanelLocation)
    panel.Q("up-button").SetEnabled(selectTrackPanelLocation != tm.paths.GetTrackRootFolder())

    local subfolderContainer = panel.Q("subfolder-container")
    local trackContainer = panel.Q("track-container")
    ClearAllTrackCards(tm)

    function HandleEyecatch(card, status, texture)
        if (status.Ok()) then
            card.Q("eyecatch").backgroundImage = texture
            card.Q("default-eyecatch").visible = false
        else
            card.Q("default-eyecatch").visible = true
        end
    end

    local anythingInFolder = false

    local subfolders = tm.resources.GetSubfolders(selectTrackPanelLocation)
    table.sort(subfolders, function(s1, s2)
        return s1.name < s2.name
    end)
    for _, subfolder in ipairs(subfolders) do
        anythingInFolder = true
        local card = subfolderContainer.InstantiateTemplate("Assets/UI/Templates/Subfolder Card.uxml").Q("subfolder-card")
        if (subfolder.eyecatchFullPath != nil) then
            tm.io.LoadTexture(subfolder.eyecatchFullPath, function(status, texture)
                HandleEyecatch(card, status, texture)
            end)
        end
        SetUpButtonSounds(tm, card)
        card.Q("name").text = tm.paths.EscapeBackslash(subfolder.name)
        SetUpScrollingText(tm, card.Q("name-container"))
        card.RegisterCallback("Click", function(_, _, subfolder)
            selectTrackPanelLocation = subfolder.fullPath
            ShowTracksAtCurrentLocation(tm)
        end, subfolder)
    end

    local tracksInFolder = tm.resources.GetTracksInFolder(selectTrackPanelLocation)
    for _, trackInFolder in ipairs(tracksInFolder) do
        anythingInFolder = true
        local card = trackContainer.InstantiateTemplate("Assets/UI/Templates/Track Card.uxml").Q("track-card")
        card.Q("default-eyecatch").text = tm.l10n.GetString("eyecatch_no_image_text")
        card.Q("error-icon").visible = false
        local eyecatchPath = tm.paths.Combine(trackInFolder.folder, trackInFolder.minimizedTrack.trackMetadata.eyecatchImage)
        tm.io.LoadTexture(eyecatchPath, function(status, texture)
            HandleEyecatch(card, status, texture)
        end)
        SetUpButtonSounds(tm, card)
        card.Q("name").text = tm.paths.EscapeBackslash(trackInFolder.minimizedTrack.trackMetadata.title)
        card.Q("artist").text = tm.paths.EscapeBackslash(trackInFolder.minimizedTrack.trackMetadata.artist)
        SetUpScrollingText(tm, card.Q("name-container"))
        SetUpScrollingText(tm, card.Q("artist-container"))
        card.RegisterCallback("Click", function(_, _, trackInFolder)
            print(trackInFolder.minimizedTrack.trackMetadata.title)
        end, trackInFolder)
    end

    local tracksWithError = tm.resources.GetTracksWithError(selectTrackPanelLocation)
    for _, trackWithError in ipairs(tracksWithError) do
        anythingInFolder = true
        local card = trackContainer.InstantiateTemplate("Assets/UI/Templates/Track Card.uxml").Q("track-card")
        card.Q("eyecatch").visible = false
        card.Q("default-eyecatch").visible = false
        card.Q("error-icon").visible = true
        SetUpButtonSounds(tm, card)
        local errorMessage = ""
        if (trackWithError.type == "Load") then
            card.Q("name").text = tm.l10n.GetString("select_track_error_card_title")
            errorMessage = tm.paths.EscapeBackslash(netString.Format(tm.l10n.GetString("select_track_error_format"),
                trackWithError.status.filePath,
                trackWithError.status.errorMessage))
        elseif (trackWithError.type == "Upgrade") then
            card.Q("name").text = tm.l10n.GetString("select_track_upgrade_error_card_title")
            errorMessage = tm.paths.EscapeBackslash(netString.Format(tm.l10n.GetString("select_track_upgrade_error_format"),
                trackWithError.status.filePath,
                trackWithError.status.errorMessage))
        end
        card.Q("artist").text = tm.l10n.GetString("select_track_error_card_artist")
        SetUpScrollingText(tm, card.Q("name-container"))
        SetUpScrollingText(tm, card.Q("artist-container"))
        card.RegisterCallback("Click", function(_, _, errorMessage)
            Alert(errorMessage)
        end, errorMessage)
    end

    if (anythingInFolder) then
        panel.Q("track-status").text = ""
    else
        panel.Q("track-status").text = tm.l10n.GetString("select_track_no_track_text")
    end
end

function ShowSelectTrackPanel(tm)
    if (trackListNeedsRefresh) then
        RefreshTrackList(tm)
        return
    end
    ShowTracksAtCurrentLocation(tm)
    tm.root.Q("select-track-panel").Q("upgrade-button").display = tm.resources.anyOutdatedTrack
end

function RefreshTrackList(tm)
    ClearAllTrackCards(tm)
    local panel = tm.root.Q("select-track-panel")
    selectTrackPanelLocation = tm.paths.GetTrackRootFolder()
    trackListNeedsRefresh = false
    panel.Q("back-button").SetEnabled(false)
    panel.Q("location-display").text = tm.paths.EscapeBackslash(selectTrackPanelLocation)
    tm.io.ReloadTrackList(function(currentlyLoadingFile)
        panel.Q("track-status").text = tm.paths.EscapeBackslash(currentlyLoadingFile)
    end,
    function(reloadStatus)
        panel.Q("back-button").SetEnabled(true)
        ShowSelectTrackPanel(tm)
    end)
end

function FadeInFilterSidesheet(tm, bg)
    bg.display = true
    tm.StartCoroutine(function()
        FadeInCoroutine(tm, bg.Q("filter-sidesheet"), 100, 0)
    end)
end

function FadeOutFilterSidesheet(tm, bg)
    tm.StartCoroutine(function()
        FadeOutCoroutine(tm, bg.Q("filter-sidesheet"), 100, 0, function()
            bg.display = false
        end)
    end)
end

function InitializeSelectTrackPanel(tm)
    selectTrackPanelLocation = tm.paths.GetTrackRootFolder()

    local panel = tm.root.Q("select-track-panel")
    panel.Q("refresh-button").RegisterCallback("Click", function()
        RefreshTrackList(tm)
    end)

    local sidesheetBg = panel.Q("filter-sidesheet-background")
    sidesheetBg.display = false
    panel.Q("filter-button").RegisterCallback("Click", function()
        if (sidesheetBg.display) then
            FadeOutFilterSidesheet(tm, sidesheetBg)
        else
            FadeInFilterSidesheet(tm, sidesheetBg)
        end
    end)

    panel.Q("upgrade-button").RegisterCallback("Click", function()
        Confirm(tm.l10n.GetString("select_track_upgrade_version_confirmation"),
            tm.l10n.GetString("select_track_upgrade_version_confirm"),
            tm.l10n.GetString("select_track_upgrade_version_cancel"),
            function()
                ClearAllTrackCards(tm)
                panel.Q("back-button").SetEnabled(false)
                tm.io.UpgradeAllTracks(function(currentlyLoadingFile)
                    panel.Q("track-status").text = tm.paths.EscapeBackslash(currentlyLoadingFile)
                end,
                function(reloadStatus)
                    panel.Q("back-button").SetEnabled(true)
                    ShowSelectTrackPanel(tm)
                    if (reloadStatus.Ok()) then
                        Alert(tm.l10n.GetString("select_track_upgrade_complete_message"))
                    else
                        Alert(tm.paths.EscapeBackslash(netString.Format(
                            tm.l10n.GetString("select_track_upgrade_process_error_format"),
                            reloadStatus.errorMessage)))
                    end
                end)
            end)
    end)

    panel.Q("up-button").RegisterCallback("Click", function()
        selectTrackPanelLocation = tm.paths.GoUpFrom(selectTrackPanelLocation)
        ShowTracksAtCurrentLocation(tm)
    end)

    panel.Q("open-button").RegisterCallback("Click", function()
        tm.OpenURL(selectTrackPanelLocation)
    end)
end

function InitializeTrackFilterSidesheet(tm)
    local bg = tm.root.Q("select-track-panel").Q("filter-sidesheet-background")
    bg.RegisterCallback("Click", function()
        tm.audio.Play("Assets/UI/SFX/Back.wav", "SFX")
        FadeOutFilterSidesheet(tm, bg)
    end)

    bg.Q("filter-sidesheet").RegisterCallback("Click", function(element, event)
        -- Prevents bg from receiving this event on the bubble up phase
        event.StopPropagation()
    end)

    bg.Q("close-button").RegisterCallback("Click", function()
        FadeOutFilterSidesheet(tm, bg)
    end)

    bg.Q("keyword-field").Q("text-field").RegisterCallback("ChangeString", function(element, event)
        local keywords = netString.Split(netString.Trim(event.newValue))
        for _, keyword in ipairs(keywords) do
            if (netString.Length(keyword) > 0) then
                print(keyword)
            end
        end
    end)
end

InitializeSelectTrackPanel(tm)
InitializeTrackFilterSidesheet(tm)