-- key: enum, value: display string
fullScreenDisplayString = {}

function UpdateVolumeDisplay(panel)
    function UpdateOneVolumeDisplay(container)
        local slider = container.Q("slider")
        local display = container.Q("value-display")
        display.text = tostring(slider.value)
    end
    UpdateOneVolumeDisplay(panel.Q("master"))
    UpdateOneVolumeDisplay(panel.Q("music"))
    UpdateOneVolumeDisplay(panel.Q("keysounds"))
    UpdateOneVolumeDisplay(panel.Q("sound-effects"))
end

function ShowOptionsPanel(tm)
    local panel = tm.root.Q("options-panel")

    local themeOptions = tm.options.GetThemeOptions()

    local currentResolution = resolution.__new()
    currentResolution.width = tm.options.width
    currentResolution.height = tm.options.height
    currentResolution.refreshRate = tm.options.refreshRate
    local resolutionDropdown = panel.Q("resolution").Q("dropdown")
    resolutionDropdown.SetValueWithoutNotify(currentResolution.ToString())

    local fullScreenDropdown = panel.Q("fullscreen-mode").Q("dropdown")
    fullScreenDropdown.SetValueWithoutNotify(fullScreenDisplayString[tm.options.fullScreenMode])

    local vSyncToggle = panel.Q("vsync").Q("track")
    SetToggleIsOn(vSyncToggle, tm.options.vSync)

    local masterSlider = panel.Q("master").Q("slider")
    local musicSlider = panel.Q("music").Q("slider")
    local keysoundsSlider = panel.Q("keysounds").Q("slider")
    local sfxSlider = panel.Q("sound-effects").Q("slider")
    SetSliderValueWithoutNotify(masterSlider, tm.options.masterVolumePercent)
    SetSliderValueWithoutNotify(musicSlider, tm.options.musicVolumePercent)
    SetSliderValueWithoutNotify(keysoundsSlider, tm.options.keysoundVolumePercent)
    SetSliderValueWithoutNotify(sfxSlider, tm.options.sfxVolumePercent)
    UpdateVolumeDisplay(panel)

    local audioBufferDropdown = panel.Q("audio-buffer-size").Q("dropdown")
    audioBufferDropdown.SetValueWithoutNotify(tostring(tm.options.audioBufferSize))

    local languageDropdown = panel.Q("language").Q("dropdown")
    local locale = tm.l10n.GetAllLocales()[tm.options.locale]
    languageDropdown.SetValueWithoutNotify(locale.languageName)

    function ShowThemeOptionToggle(containerName, key)
        local toggle = panel.Q(containerName).Q("track")
        SetToggleIsOn(toggle, bool.Parse(themeOptions.Get(key)))
    end
    ShowThemeOptionToggle("show-loading-bar", "showLoadingBar")
    ShowThemeOptionToggle("show-fps", "showFps")
    ShowThemeOptionToggle("show-judgement-tally", "showJudgementTally")
    ShowThemeOptionToggle("show-lane-dividers", "showLaneDividers")
end

function InitializeOptionsPanel(tm)
    function InitializeLocalizedDropdowns(panel)
        local fullScreenDropdown = panel.Q("fullscreen-mode").Q("dropdown")
        fullScreenDisplayString = {
            ExclusiveFullScreen = tm.l10n.GetString("fullscreen_mode_exclusive_fullscreen"),
            FullScreenWindow = tm.l10n.GetString("fullscreen_mode_fullscreen_window"),
            MaximizedWindow = tm.l10n.GetString("fullscreen_mode_maximized_window"),
            Windowed = tm.l10n.GetString("fullscreen_mode_windowed")
        }
        local fullScreenChoices = {}
        for enum, display in pairs(fullScreenDisplayString) do
            table.insert(fullScreenChoices, display)
        end
        fullScreenDropdown.choices = fullScreenChoices

        local languageDropdown = panel.Q("language").Q("dropdown")
        local languageChoices = {}
        for localeName, locale in pairs(tm.l10n.GetAllLocales()) do
            table.insert(languageChoices, locale.languageName)
        end
        languageDropdown.choices = languageChoices
    end

    local panel = tm.root.Q("options-panel")
    InitializeLocalizedDropdowns(panel)
    panel.display = false

    local themeOptions = tm.options.GetThemeOptions()

    local resolutionDropdown = panel.Q("resolution").Q("dropdown")
    local resolutionChoices = {}
    for i, resolution in ipairs(screen.resolutions) do
        table.insert(resolutionChoices, resolution.ToString())
    end
    resolutionDropdown.choices = resolutionChoices
    resolutionDropdown.RegisterCallback("ChangeString", function(element, event)
        for _, resolution in ipairs(screen.resolutions) do
            if (resolution.ToString() == event.newValue) then
                tm.options.width = resolution.width
                tm.options.height = resolution.height
                tm.options.refreshRate = resolution.refreshRate
                break
            end
        end
        tm.options.ApplyGraphicSettings()
    end)

    local fullScreenDropdown = panel.Q("fullscreen-mode").Q("dropdown")
    fullScreenDropdown.RegisterCallback("ChangeString", function(element, event)
        for enum, display in pairs(fullScreenDisplayString) do
            if (display == event.newValue) then
                tm.options.fullScreenMode = enum
                break
            end
        end
        tm.options.ApplyGraphicSettings()
    end)

    local vSyncToggle = panel.Q("vsync").Q("track")
    vSyncToggle.RegisterCallback("Click", function()
        tm.options.vSync = not tm.options.vSync
        tm.options.ApplyGraphicSettings()
    end)

    local masterSlider = panel.Q("master").Q("slider")
    local musicSlider = panel.Q("music").Q("slider")
    local keysoundsSlider = panel.Q("keysounds").Q("slider")
    local sfxSlider = panel.Q("sound-effects").Q("slider")
    masterSlider.lowValue = 0
    masterSlider.highValue = 100
    masterSlider.RegisterCallback("ChangeInt", function(element, event)
        tm.options.masterVolumePercent = event.newValue
        tm.options.ApplyVolumeSettings()
        UpdateVolumeDisplay(panel)
    end)
    musicSlider.lowValue = 0
    musicSlider.highValue = 100
    musicSlider.RegisterCallback("ChangeInt", function(element, event)
        tm.options.musicVolumePercent = event.newValue
        tm.options.ApplyVolumeSettings()
        UpdateVolumeDisplay(panel)
    end)
    keysoundsSlider.lowValue = 0
    keysoundsSlider.highValue = 100
    keysoundsSlider.RegisterCallback("ChangeInt", function(element, event)
        tm.options.keysoundVolumePercent = event.newValue
        tm.options.ApplyVolumeSettings()
        UpdateVolumeDisplay(panel)
    end)
    sfxSlider.lowValue = 0
    sfxSlider.highValue = 100
    sfxSlider.RegisterCallback("ChangeInt", function(element, event)
        tm.options.sfxVolumePercent = event.newValue
        tm.options.ApplyVolumeSettings()
        UpdateVolumeDisplay(panel)
    end)

    local audioBufferDropdown = panel.Q("audio-buffer-size").Q("dropdown")
    audioBufferDropdown.choices = {"128", "256", "512", "1024"}
    audioBufferDropdown.RegisterCallback("ChangeString", function(element, event)
        tm.options.audioBufferSize = int.Parse(event.newValue)
        tm.options.ApplyAudioBufferSize()
    end)

    local languageDropdown = panel.Q("language").Q("dropdown")
    languageDropdown.RegisterCallback("ChangeString", function(element, event)
        for localeName, locale in pairs(tm.l10n.GetAllLocales()) do
            if (locale.languageName == event.newValue) then
                tm.options.locale = localeName
                tm.l10n.ApplyLocale(localeName)
                InitializeLocalizedDropdowns(panel)
                ShowOptionsPanel(tm)
                break
            end
        end
    end)

    local skinsButton = panel.Q("skins").Q("button")
    skinsButton.RegisterCallback("Click", function()
    end)

    function InitializeThemeOptionToggle(containerName, key, defaultValue)
        local toggle = panel.Q(containerName).Q("track")
        if (not themeOptions.Has(key)) then
            themeOptions.Add(key, defaultValue)
        end
        toggle.RegisterCallback("Click", function()
            local oldValue = themeOptions.Get(key)
            if (oldValue == "True") then
                themeOptions.Set(key, "False")
            else
                themeOptions.Set(key, "True")
            end
        end)
    end
    InitializeThemeOptionToggle("show-loading-bar", "showLoadingBar", "True")
    InitializeThemeOptionToggle("show-fps", "showFps", "False")
    InitializeThemeOptionToggle("show-judgement-tally", "showJudgementTally", "False")
    InitializeThemeOptionToggle("show-lane-dividers", "showLaneDividers", "False")
end

InitializeOptionsPanel(tm)