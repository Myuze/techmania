selectedTrackFolder = ""
selectedFullTrack = nil
allPatternRadioButtons = {}

-- pattern may be nil.
function ShowPatternDetails(tm, panel, pattern)
    if (pattern == nil) then
        panel.Q("bpm").Q("content").text = ""
        panel.Q("length").Q("content").text = ""
        panel.Q("notes").Q("content").text = ""
        panel.Q("author").Q("content").text = ""
        panel.Q("record").Q("content").text = ""
        panel.Q("record").Q("medal-text").text = ""
        return
    end

    pattern.PrepareForTimeCalculation()

    -- BPM range
    local minBpm = pattern.patternMetadata.initBpm
    local maxBpm = minBpm
    for _, e in ipairs(pattern.bpmEvents) do
        if (e.bpm < minBpm) then minBpm = e.bpm end
        if (e.bpm > maxBpm) then maxBpm = e.bpm end
    end
    function FormatBpm(bpm)
        local rounded = mathf.RoundToInt(bpm)
        if (mathf.Abs(rounded - bpm) < mathf.Epsilon) then
            return tostring(rounded)
        else
            return netString.Format("{0:F2}", bpm)
        end
    end
    if (minBpm < maxBpm) then
        panel.Q("bpm").Q("content").text = FormatBpm(minBpm) .. " - " .. FormatBpm(maxBpm)
    else
        panel.Q("bpm").Q("content").text = FormatBpm(minBpm)
    end
    SetUpScrollingText(tm, panel.Q("bpm").Q("container"))

    -- Length
    local length = 0
    -- This function returns void and has 2 out parameters
    _, length, _ = pattern.GetLengthInSecondsAndScans()
    local minutes = mathf.FloorToInt(length / 60)
    local seconds = mathf.FloorToInt(length - minutes * 60)
    if (seconds < 10) then 
        panel.Q("length").Q("content").text = minutes .. ":0" .. seconds
    else
        panel.Q("length").Q("content").text = minutes .. ":" .. seconds
    end

    -- Note count
    local noteCount = 0
    local notes = pattern.NotesAsList()
    for _, note in ipairs(notes) do
        if (note.lane < pattern.patternMetadata.playableLanes) then
            noteCount = noteCount + 1
        end
    end
    panel.Q("notes").Q("content").text = noteCount

    -- Author
    panel.Q("author").Q("content").text = pattern.patternMetadata.author

    -- Record
    local record = tm.records.GetRecord(pattern)
    if (record == nil) then
        panel.Q("record").Q("content").text = "---"
        panel.Q("record").Q("medal-text").text = ""
    else
        local score = record.GetScore()
        panel.Q("record").Q("content").text = score .. "   " .. ScoreToRank(score)
        local medal = record.GetMedal()
        if (medal == "NoMedal") then
            panel.Q("record").Q("medal-text").text = ""
        elseif (medal == "AllCombo") then
            panel.Q("record").Q("medal-text").text = tm.l10n.GetString("full_combo_medal")
        elseif (medal == "PerfectPlay") then
            panel.Q("record").Q("medal-text").text = tm.l10n.GetString("perfect_play_medal")
        elseif (medal == "AbsolutePerfect") then
            panel.Q("record").Q("medal-text").text = tm.l10n.GetString("absolute_perfect_medal")
        end
    end
end

function ShowSelectPatternPanel(tm)
    local panel = tm.root.Q("select-pattern-panel")
    local track = selectedFullTrack

    local eyecatchPath = tm.paths.Combine(selectedTrackFolder, track.trackMetadata.eyecatchImage)
    LoadAndShowEyecatch(tm, eyecatchPath, panel.Q("eyecatch"))
    panel.Q("metadata-wrap").Q("genre").text = tm.paths.EscapeBackslash(track.trackMetadata.genre)
    panel.Q("metadata-wrap").Q("title").text = tm.paths.EscapeBackslash(track.trackMetadata.title)
    panel.Q("metadata-wrap").Q("artist").text = tm.paths.EscapeBackslash(track.trackMetadata.artist)

    panel.Q("pattern-list").Q("no-pattern-text").display = (#track.patterns == 0)
    local patternListContainer = panel.Q("pattern-list").Q("unity-content-container")
    for _, child in ipairs(patternListContainer.Children()) do
        child.RemoveFromHierarchy()
    end
    allPatternRadioButtons = {}
    for _, pattern in ipairs(track.patterns) do
        local radioButton = patternListContainer.InstantiateTemplate("Assets/UI/Templates/Pattern Radio Button.uxml").Q("radio-button")
        table.insert(allPatternRadioButtons, radioButton)
        SetUpButtonSounds(tm, radioButton)

        local metadata = pattern.patternMetadata

        radioButton.Q("2l-icon").display = metadata.playableLanes == 2
        radioButton.Q("3l-icon").display = metadata.playableLanes == 3
        radioButton.Q("4l-icon").display = metadata.playableLanes == 4
        radioButton.Q("touch-icon").display = metadata.controlSchemeString == "Touch"
        radioButton.Q("keys-icon").display = metadata.controlSchemeString == "Keys"
        radioButton.Q("km-icon").display = metadata.controlSchemeString == "KM"
        radioButton.Q("level").text = metadata.level
        radioButton.Q("pattern-name").text = metadata.patternName
        SetUpScrollingText(tm, radioButton.Q("pattern-name-container"))

        local record = tm.records.GetRecord(pattern)
        local medal = ""
        if (record != nil) then
            medal = record.GetMedal()
        end
        if (medal == "AbsolutePerfect" or
            medal == "PerfectPlay") then
            radioButton.Q("perfect-play-icon").display = true
            radioButton.Q("all-combo-icon").display = false
        elseif (medal == "AllCombo") then
            radioButton.Q("perfect-play-icon").display = false
            radioButton.Q("all-combo-icon").display = true
        else
            radioButton.Q("perfect-play-icon").display = false
            radioButton.Q("all-combo-icon").display = false
        end

        radioButton.RegisterCallback("Click", function(_, _, pattern)
            SetRadioButton(radioButton, allPatternRadioButtons)
            ShowPatternDetails(tm, panel, pattern)
            panel.Q("play-button").SetEnabled(true)
        end, pattern)
    end
    SetRadioButton(nil, allPatternRadioButtons)
    ShowPatternDetails(tm, panel, nil)
    panel.Q("play-button").SetEnabled(false)
end

function InitializeSelectPatternPanel(tm)

end

InitializeSelectPatternPanel(tm)