-- selectedTrackFolder and selectedFullTrack are defined in Select Track Panel.txt.
selectedTrackOptions = nil
selectedPattern = nil
allPatternRadioButtons = {}
previewPlaybackCoroutine = nil
previewTrackAudioSource = nil
radarOfSelectedPattern = nil
radarRadiusUnit = 13 / 20

-- In each table, key is enum, value is display string
modifierDisplayString = {
    noteOpacity = {},
    scanlineOpacity = {},
    scanDirection = {},
    notePosition = {},
    scanPosition = {},
    fever = {},
    keysound = {},
    assistTick = {},
    mode = {},
    controlOverride = {},
    scrollSpeed = {}
}

-- pattern may be nil.
function ShowPatternDetails(tm, panel)
    local pattern = selectedPattern

    function ShowRadar()
        local radarElement = panel.Q("radar")
        radarOfSelectedPattern = CalculateRadarOfPattern(pattern)
        radarElement.MarkDirtyRepaint()

        radarElement.Q("density").Q("value").text = tostring(radarOfSelectedPattern.density)
        radarElement.Q("peak").Q("value").text = tostring(radarOfSelectedPattern.peak)
        radarElement.Q("speed").Q("value").text = tostring(radarOfSelectedPattern.speed)
        radarElement.Q("chaos").Q("value").text = tostring(radarOfSelectedPattern.chaos)
        radarElement.Q("async").Q("value").text = tostring(radarOfSelectedPattern.async)
    end

    if (pattern == nil) then
        panel.Q("bpm").Q("content").text = ""
        panel.Q("length").Q("content").text = ""
        panel.Q("notes").Q("content").text = ""
        panel.Q("author").Q("content").text = ""
        panel.Q("record").Q("content").text = ""
        panel.Q("record").Q("medal-text").text = ""
        ShowRadar()
        return
    end

    -- This also enables radar calculation.
    pattern.PrepareForTimeCalculation()

    -- BPM range
    local minBpm = pattern.patternMetadata.initBpm
    local maxBpm = minBpm
    for _, e in ipairs(pattern.bpmEvents) do
        if (e.bpm < minBpm) then minBpm = e.bpm end
        if (e.bpm > maxBpm) then maxBpm = e.bpm end
    end
    function FormatBpm(bpm)
        local rounded = unity.mathf.RoundToInt(bpm)
        if (unity.mathf.Abs(rounded - bpm) < unity.mathf.Epsilon) then
            return tostring(rounded)
        else
            return net.string.Format("{0:F2}", bpm)
        end
    end
    if (minBpm < maxBpm) then
        panel.Q("bpm").Q("content").text = FormatBpm(minBpm) .. " - " .. FormatBpm(maxBpm)
    else
        panel.Q("bpm").Q("content").text = FormatBpm(minBpm)
    end
    SetUpScrollingText(tm, panel.Q("bpm").Q("container"))

    -- Length
    local length = 0
    -- This function returns void and has 2 out parameters
    _, length, _ = pattern.GetLengthInSecondsAndScans()
    local minutes = unity.mathf.FloorToInt(length / 60)
    local seconds = unity.mathf.FloorToInt(length - minutes * 60)
    if (seconds < 10) then 
        panel.Q("length").Q("content").text = minutes .. ":0" .. seconds
    else
        panel.Q("length").Q("content").text = minutes .. ":" .. seconds
    end

    -- Note count
    local noteCount = 0
    local notes = pattern.NotesAsList()
    for _, note in ipairs(notes) do
        if (note.lane < pattern.patternMetadata.playableLanes) then
            noteCount = noteCount + 1
        end
    end
    panel.Q("notes").Q("content").text = noteCount

    -- Author
    panel.Q("author").Q("content").text = pattern.patternMetadata.author

    -- Record
    local record = tm.records.GetRecord(pattern)
    if (record == nil) then
        panel.Q("record").Q("content").text = "---"
        panel.Q("record").Q("medal-text").text = ""
    else
        local score = record.GetScore()
        panel.Q("record").Q("content").text = score .. "   " .. ScoreToRank(score)
        local medal = record.GetMedal()
        if (medal == "NoMedal") then
            panel.Q("record").Q("medal-text").text = ""
        elseif (medal == "AllCombo") then
            panel.Q("record").Q("medal-text").text = tm.l10n.GetString("full_combo_medal")
        elseif (medal == "PerfectPlay") then
            panel.Q("record").Q("medal-text").text = tm.l10n.GetString("perfect_play_medal")
        elseif (medal == "AbsolutePerfect") then
            panel.Q("record").Q("medal-text").text = tm.l10n.GetString("absolute_perfect_medal")
        end
    end

    -- Radar
    ShowRadar()
end

function RadarAngleForVertex(i)
    return (-90 + 72 * i) * unity.mathf.Deg2Rad
end

function ShowCurrentModifiers(tm)
    local container = tm.root.Q("select-pattern-panel").Q("modifier-display").Q("container")
    local content = container.Q("content")

    local allSegments = {}
    function CheckAndAddSegment(modifierKey, isSpecial)
        if (tm.options.modifiers[modifierKey] == "Normal") then return end
        if (tm.options.modifiers[modifierKey] == "None") then return end
        local segment = modifierDisplayString[modifierKey][tm.options.modifiers[modifierKey]]
        if (isSpecial) then
            segment = "<color=#CF6679>" .. segment .. "</color>"
        end
        table.insert(allSegments, segment)
    end
    CheckAndAddSegment("noteOpacity", false)
    CheckAndAddSegment("scanlineOpacity", false)
    CheckAndAddSegment("scanDirection", false)
    CheckAndAddSegment("notePosition", false)
    CheckAndAddSegment("scanPosition", false)
    CheckAndAddSegment("fever", false)
    CheckAndAddSegment("keysound", false)
    CheckAndAddSegment("assistTick", false)
    if (selectedTrackOptions != nil and selectedTrackOptions.noVideo) then
        table.insert(allSegments, tm.l10n.GetString("modifier_no_video"))
    end
    CheckAndAddSegment("mode", true)
    CheckAndAddSegment("controlOverride", true)
    CheckAndAddSegment("scrollSpeed", true)

    if (#allSegments == 0) then
        table.insert(allSegments, tm.l10n.GetString("select_pattern_modifier_none"))
    end

    content.text = net.string.Join(" / ", allSegments)
    SetUpScrollingText(tm, container)
end

function ShowControlSchemeIcons(tm)
    for index, pattern in ipairs(selectedFullTrack.patterns) do
        local scheme = pattern.patternMetadata.controlSchemeString
        local radioButton = allPatternRadioButtons[index]

        local overrideScheme = scheme
        if (tm.options.modifiers.controlOverride == "OverrideToTouch") then
            overrideScheme = "Touch"
        elseif (tm.options.modifiers.controlOverride == "OverrideToKeys") then
            overrideScheme = "Keys"
        elseif (tm.options.modifiers.controlOverride == "OverrideToKM") then
            overrideScheme = "KM"
        end

        local iconContainer = radioButton.Q("scheme-icon-container")
        if (overrideScheme == scheme) then
            iconContainer.RemoveFromClassList("scheme-override")
            iconContainer.AddToClassList("scheme-no-override")
        else
            iconContainer.RemoveFromClassList("scheme-no-override")
            iconContainer.AddToClassList("scheme-override")
        end
        scheme = overrideScheme

        radioButton.Q("touch-icon").display = scheme == "Touch"
        radioButton.Q("keys-icon").display = scheme == "Keys"
        radioButton.Q("km-icon").display = scheme == "KM"
    end
end

function ShowSelectPatternPanel(tm)
    local panel = tm.root.Q("select-pattern-panel")
    local track = selectedFullTrack

    -- Load per-track options.
    selectedTrackOptions = tm.options.GetPerTrackOptions(track.trackMetadata.guid)

    -- Display metadata.
    local eyecatchPath = tm.paths.Combine(selectedTrackFolder, track.trackMetadata.eyecatchImage)
    LoadAndShowEyecatch(tm, eyecatchPath, panel.Q("eyecatch"))
    panel.Q("metadata-wrap").Q("genre").text = tm.paths.EscapeBackslash(track.trackMetadata.genre)
    panel.Q("metadata-wrap").Q("title").text = tm.paths.EscapeBackslash(track.trackMetadata.title)
    panel.Q("metadata-wrap").Q("artist").text = tm.paths.EscapeBackslash(track.trackMetadata.artist)

    -- Display pattern list.
    panel.Q("pattern-list").Q("no-pattern-text").display = (#track.patterns == 0)
    local patternListContainer = panel.Q("pattern-list").Q("unity-content-container")
    for _, child in ipairs(patternListContainer.Children()) do
        child.RemoveFromHierarchy()
    end
    allPatternRadioButtons = {}
    for _, pattern in ipairs(track.patterns) do
        local radioButton = patternListContainer.InstantiateTemplate("Assets/UI/Templates/Pattern Radio Button.uxml").Q("radio-button")
        table.insert(allPatternRadioButtons, radioButton)
        SetUpButtonSounds(tm, radioButton)

        local metadata = pattern.patternMetadata

        radioButton.Q("2l-icon").display = metadata.playableLanes == 2
        radioButton.Q("3l-icon").display = metadata.playableLanes == 3
        radioButton.Q("4l-icon").display = metadata.playableLanes == 4
        -- Control scheme icons are controlled separately in ShowControlSchemeIcons.
        radioButton.Q("level").text = metadata.level
        radioButton.Q("pattern-name").text = metadata.patternName
        SetUpScrollingText(tm, radioButton.Q("pattern-name-container"))

        local record = tm.records.GetRecord(pattern)
        local medal = ""
        if (record != nil) then
            medal = record.GetMedal()
        end
        if (medal == "AbsolutePerfect" or
            medal == "PerfectPlay") then
            radioButton.Q("perfect-play-icon").display = true
            radioButton.Q("all-combo-icon").display = false
        elseif (medal == "AllCombo") then
            radioButton.Q("perfect-play-icon").display = false
            radioButton.Q("all-combo-icon").display = true
        else
            radioButton.Q("perfect-play-icon").display = false
            radioButton.Q("all-combo-icon").display = false
        end

        radioButton.RegisterCallback("Click", function(_, _, pattern)
            selectedPattern = pattern
            SetRadioButton(radioButton, allPatternRadioButtons)
            ShowPatternDetails(tm, panel)
            panel.Q("play-button").SetEnabled(true)
        end, pattern)
    end
    SetRadioButton(nil, allPatternRadioButtons)
    ShowControlSchemeIcons(tm)

    -- Initialize details when no pattern is selected.
    selectedPattern = nil
    ShowPatternDetails(tm, panel)
    panel.Q("play-button").SetEnabled(false)
    ShowCurrentModifiers(tm)

    -- The radar displays are tied to the radar element's layout,
    -- so they are only initialized when this panel appears the first time,
    -- in InitializeRadar.
end

function InitializeRadar(tm)
    local radarElement = tm.root.Q("select-pattern-panel").Q("radar")
    local radarCenterX = radarElement.contentRect.width * 0.5
    local radarCenterY = radarElement.contentRect.height * 0.5
    
    local radarDisplayWidth = radarElement.Q("density").contentRect.width
    local radarDisplayHeight = radarElement.Q("density").contentRect.height
    local radarDisplayDistance = radarRadiusUnit * 100 + 40
    function PlaceRadarDisplay(element, vertex)
        element.style.left = tm.style.LengthInPixel(
            radarCenterX + radarDisplayDistance * unity.mathf.Cos(RadarAngleForVertex(vertex)) - radarDisplayWidth * 0.5)
        element.style.top = tm.style.LengthInPixel(
            radarCenterY + radarDisplayDistance * unity.mathf.Sin(RadarAngleForVertex(vertex)) - radarDisplayHeight * 0.5)
    end
    PlaceRadarDisplay(radarElement.Q("density"), 0)
    PlaceRadarDisplay(radarElement.Q("peak"), 1)
    PlaceRadarDisplay(radarElement.Q("speed"), 2)
    PlaceRadarDisplay(radarElement.Q("chaos"), 3)
    PlaceRadarDisplay(radarElement.Q("async"), 4)
end

function SetDropdownValuesInModifierSidesheet(tm)
    local sheet = tm.root.Q("select-pattern-panel").Q("modifier-sidesheet")
    function SetDropdownValue(containerName, modifierKey)
        local display = modifierDisplayString[modifierKey][tm.options.modifiers[modifierKey]]
        sheet.Q(containerName).Q("dropdown").SetValueWithoutNotify(display)
    end
    SetDropdownValue("note-opacity", "noteOpacity")
    SetDropdownValue("scanline-opacity", "scanlineOpacity")
    SetDropdownValue("scan-direction", "scanDirection")
    SetDropdownValue("note-position", "notePosition")
    SetDropdownValue("scan-position", "scanPosition")
    SetDropdownValue("fever", "fever")
    SetDropdownValue("keysound", "keysound")
    SetDropdownValue("assist-tick", "assistTick")
    SetDropdownValue("mode", "mode")
    SetDropdownValue("control-override", "controlOverride")
    SetDropdownValue("scroll-speed", "scrollSpeed")
end

function ShowModifierSideSheet(tm)
    local sheet = tm.root.Q("select-pattern-panel").Q("modifier-sidesheet")
    SetDropdownValuesInModifierSidesheet(tm)

    local themeOptions = tm.options.GetThemeOptions()
    local showTally = false
    if (themeOptions.Get("showJudgementTally") == "True") then
        showTally = true
    end
    SetToggleIsOn(sheet.Q("judgement-tally").Q("track"), showTally)

    ShowBgBrightnessSlider(sheet.Q("bg-brightness"))

    SetToggleIsOn(sheet.Q("no-video").Q("track"), selectedTrackOptions.noVideo)
end

function FadeInModifierSidesheet(tm, bg)
    bg.display = true
    tm.StartCoroutine(function()
        FadeInCoroutine(tm, bg.Q("modifier-sidesheet"), 100, 0)
    end)
end

function FadeOutModifierSidesheet(tm, bg)
    tm.StartCoroutine(function()
        FadeOutCoroutine(tm, bg.Q("modifier-sidesheet"), 100, 0, function()
            bg.display = false
        end)
    end)
end

function InitializeSelectPatternPanel(tm)
    local panel = tm.root.Q("select-pattern-panel")

    local sidesheetBg = panel.Q("modifier-sidesheet-background")
    sidesheetBg.display = false
    panel.Q("modifiers-button").RegisterCallback("Click", function()
        ShowModifierSideSheet(tm)
        FadeInModifierSidesheet(tm, sidesheetBg)
    end)

    panel.Q("play-button").RegisterCallback("Click", function()
        tm.audio.Play(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Play.wav"), "SFX")

        -- Populate game setup
        tm.gameSetup.trackFolder = selectedTrackFolder
        tm.gameSetup.patternGuid = selectedPattern.patternMetadata.guid

        -- Save options
        tm.options.SaveToFile()

        -- Begin loading
        GamePanelStartLoading(tm)
    end)

    -- Set the function to draw radar graph. Actual drawing happens
    -- when ShowPatternDetails calls ShowRadar.
    local radarElement = panel.Q("radar")
    radarElement.SetMeshPainterFunction(function(element, painter)
        painter.SetLineWidth(2)
        painter.SetLineCap("Round")
        painter.SetLineJoin("Miter")

        local majorStrokeAlpha = 0.12
        local minorStrokeAlpha = 0.05

        local radarElement = panel.Q("radar")
        local radarCenterX = radarElement.contentRect.width * 0.5
        local radarCenterY = radarElement.contentRect.height * 0.5

        -- Draw radii, lines from the center to vertices of the outmost pentagon
        painter.SetStrokeColor(1, 1, 1, majorStrokeAlpha)
        for i = 1, 5 do
            local angle = RadarAngleForVertex(i)
            painter.BeginPath()
            painter.MoveTo(radarCenterX, radarCenterY)
            painter.LineTo(
                radarCenterX + radarRadiusUnit * 100 * unity.mathf.Cos(angle),
                radarCenterY + radarRadiusUnit * 100 * unity.mathf.Sin(angle))
            painter.ClosePath()
            painter.Stroke()
        end

        -- Draw pentagons
        for pentagon = 1, 5 do
            local radius = radarRadiusUnit * pentagon * 20
            if (pentagon == 5) then
                painter.SetStrokeColor(1, 1, 1, majorStrokeAlpha)
            else
                painter.SetStrokeColor(1, 1, 1, minorStrokeAlpha)
            end
            painter.BeginPath()
            painter.MoveTo(radarCenterX, radarCenterY - radius)
            for vertex = 1, 4 do
                local angle = RadarAngleForVertex(vertex)
                painter.LineTo(
                    radarCenterX + radius * unity.mathf.Cos(angle),
                    radarCenterY + radius * unity.mathf.Sin(angle))
            end
            painter.ClosePath()
            painter.Stroke()
        end

        -- Draw radar
        if (radarOfSelectedPattern ~= nil) then
            painter.SetFillColor(165 / 256, 214 / 256, 167 / 256)
            painter.BeginPath()
            painter.MoveTo(radarCenterX, radarCenterY - radarRadiusUnit * radarOfSelectedPattern.density)
            function DrawRadarDimension(vertex, normalized)
                local angle = RadarAngleForVertex(vertex)
                painter.LineTo(
                    radarCenterX + radarRadiusUnit * normalized * unity.mathf.Cos(angle),
                    radarCenterY + radarRadiusUnit * normalized * unity.mathf.Sin(angle))
            end
            DrawRadarDimension(1, radarOfSelectedPattern.peak)
            DrawRadarDimension(2, radarOfSelectedPattern.speed)
            DrawRadarDimension(3, radarOfSelectedPattern.chaos)
            DrawRadarDimension(4, radarOfSelectedPattern.async)
            painter.ClosePath()
            painter.Fill()
        end
    end)
end

function InitializeModifierSidesheet(tm)
    local bg = tm.root.Q("select-pattern-panel").Q("modifier-sidesheet-background")
    bg.RegisterCallback("Click", function()
        tm.audio.Play(tm.io.LoadAudioFromTheme("Assets/UI/SFX/Back.wav"), "SFX")
        FadeOutModifierSidesheet(tm, bg)
    end)

    bg.Q("modifier-sidesheet").RegisterCallback("Click", function(element, event)
        -- Prevents bg from receiving this event on the bubble up phase
        event.StopPropagation()
    end)

    bg.Q("close-button").RegisterCallback("Click", function()
        FadeOutModifierSidesheet(tm, bg)
    end)

    function LocalizeDropdowns(tm)
        modifierDisplayString.noteOpacity = {
            Normal = tm.l10n.GetString("modifier_normal"),
            FadeOut = tm.l10n.GetString("modifier_fade_out"),
            FadeOut2 = tm.l10n.GetString("modifier_fade_out_2"),
            FadeIn = tm.l10n.GetString("modifier_fade_in"),
            FadeIn2 = tm.l10n.GetString("modifier_fade_in_2")
        }
        modifierDisplayString.scanlineOpacity = {
            Normal = tm.l10n.GetString("modifier_normal"),
            Blink = tm.l10n.GetString("modifier_blink"),
            Blink2 = tm.l10n.GetString("modifier_blink_2"),
            Blind = tm.l10n.GetString("modifier_blind")
        }
        modifierDisplayString.scanDirection = {
            Normal = tm.l10n.GetString("modifier_normal"),
            RR = tm.l10n.GetString("modifier_right_right"),
            LR = tm.l10n.GetString("modifier_left_right"),
            LL = tm.l10n.GetString("modifier_left_left")
        }
        modifierDisplayString.notePosition = {
            Normal = tm.l10n.GetString("modifier_normal"),
            Mirror = tm.l10n.GetString("modifier_mirror")
        }
        modifierDisplayString.scanPosition = {
            Normal = tm.l10n.GetString("modifier_normal"),
            Swap = tm.l10n.GetString("modifier_swap")
        }
        modifierDisplayString.fever = {
            Normal = tm.l10n.GetString("modifier_normal"),
            FeverOff = tm.l10n.GetString("modifier_fever_off"),
            AutoFever = tm.l10n.GetString("modifier_auto_fever")
        }
        modifierDisplayString.keysound = {
            Normal = tm.l10n.GetString("modifier_normal"),
            AutoKeysound = tm.l10n.GetString("modifier_auto_keysound")
        }
        modifierDisplayString.assistTick = {
            None = tm.l10n.GetString("modifier_none"),
            AssistTick = tm.l10n.GetString("modifier_assist_tick"),
            AutoAssistTick = tm.l10n.GetString("modifier_auto_assist_tick")
        }
        modifierDisplayString.mode = {
            Normal = tm.l10n.GetString("modifier_normal"),
            NoFail = tm.l10n.GetString("modifier_no_fail"),
            AutoPlay = tm.l10n.GetString("modifier_auto_play"),
            Practice = tm.l10n.GetString("modifier_practice")
        }
        modifierDisplayString.controlOverride = {
            None = tm.l10n.GetString("modifier_none"),
            OverrideToTouch = tm.l10n.GetString("modifier_override_to_touch"),
            OverrideToKeys = tm.l10n.GetString("modifier_override_to_keys"),
            OverrideToKM = tm.l10n.GetString("modifier_override_to_km")
        }
        modifierDisplayString.scrollSpeed = {
            Normal = tm.l10n.GetString("modifier_normal"),
            HalfSpeed = tm.l10n.GetString("modifier_half_speed")
        }

        function LocalizeOneDropdown(bg, containerName, displayStringTable)
            local choices = {}
            for _, displayString in pairs(displayStringTable) do
                table.insert(choices, displayString)
            end
            bg.Q(containerName).Q("dropdown").choices = choices
        end
        LocalizeOneDropdown(bg, "note-opacity", modifierDisplayString.noteOpacity)
        LocalizeOneDropdown(bg, "scanline-opacity", modifierDisplayString.scanlineOpacity)
        LocalizeOneDropdown(bg, "scan-direction", modifierDisplayString.scanDirection)
        LocalizeOneDropdown(bg, "note-position", modifierDisplayString.notePosition)
        LocalizeOneDropdown(bg, "scan-position", modifierDisplayString.scanPosition)
        LocalizeOneDropdown(bg, "fever", modifierDisplayString.fever)
        LocalizeOneDropdown(bg, "keysound", modifierDisplayString.keysound)
        LocalizeOneDropdown(bg, "assist-tick", modifierDisplayString.assistTick)
        LocalizeOneDropdown(bg, "mode", modifierDisplayString.mode)
        LocalizeOneDropdown(bg, "control-override", modifierDisplayString.controlOverride)
        LocalizeOneDropdown(bg, "scroll-speed", modifierDisplayString.scrollSpeed)
    end
    LocalizeDropdowns(tm)
    table.insert(callbacksOnLocaleChange, function()
        LocalizeDropdowns(tm)
        SetDropdownValuesInModifierSidesheet(tm)
        ShowCurrentModifiers(tm)
    end)

    function InitializeDropdown(containerName, modifierKey)
        -- tm.options.modifiers and modifierDisplayString share the same keys.
        bg.Q(containerName).Q("dropdown").RegisterCallback("ChangeString", function(element, event)
            tm.options.modifiers[modifierKey] = KeyFromValue(modifierDisplayString[modifierKey], event.newValue)
            ShowCurrentModifiers(tm)
        end)
    end
    InitializeDropdown("note-opacity", "noteOpacity")
    InitializeDropdown("scanline-opacity", "scanlineOpacity")
    InitializeDropdown("scan-direction", "scanDirection")
    InitializeDropdown("note-position", "notePosition")
    InitializeDropdown("scan-position", "scanPosition")
    InitializeDropdown("fever", "fever")
    InitializeDropdown("keysound", "keysound")
    InitializeDropdown("assist-tick", "assistTick")
    InitializeDropdown("mode", "mode")
    InitializeDropdown("control-override", "controlOverride")
    bg.Q("control-override").Q("dropdown").RegisterCallback("ChangeString", function()
        ShowControlSchemeIcons(tm)
    end)
    InitializeDropdown("scroll-speed", "scrollSpeed")

    local judgementTallyKey = "showJudgementTally"
    local themeOptions = tm.options.GetThemeOptions()
    if (not themeOptions.Has(judgementTallyKey)) then
        themeOptions.Add(judgementTallyKey, "False")
    end
    bg.Q("judgement-tally").Q("track").RegisterCallback("Click", function()
        local oldValue = themeOptions.Get(judgementTallyKey)
        if (oldValue == "True") then
            themeOptions.Set(judgementTallyKey, "False")
        else
            themeOptions.Set(judgementTallyKey, "True")
        end
    end)

    InitializeBgBrightnessSlider(tm, bg.Q("bg-brightness"))

    bg.Q("no-video").Q("track").RegisterCallback("Click", function(element, event)
        if (selectedTrackOptions == nil) then return end
        selectedTrackOptions.noVideo = not selectedTrackOptions.noVideo
        ShowCurrentModifiers(tm)
    end)
end

function StartPreviewTrackPlayback(tm)
    local trackFolder = selectedTrackFolder
    local trackMetadata = selectedFullTrack.trackMetadata

    if (previewPlaybackCoroutine != nil) then
        tm.StopCoroutine(previewPlaybackCoroutine)
    end

    if (trackMetadata.previewTrack == nil) then return end
    if (trackMetadata.previewTrack == "") then return end
    if (trackMetadata.previewStartTime > trackMetadata.previewEndTime) then return end
    local previewPath = tm.paths.Combine(trackFolder, trackMetadata.previewTrack)

    tm.io.LoadAudioFromFile(previewPath, function(status, clip)
        if (not status.Ok()) then return end
        -- If the user transitioned away while loading the clip, don't play.
        if (not tm.root.Q("select-pattern-panel").display) then return end

        local startTime = trackMetadata.previewStartTime
        local endTime = trackMetadata.previewEndTime
        if (startTime < 0) then startTime = 0 end
        if (endTime > clip.length) then endTime = clip.length end
        if (endTime == 0) then endTime = clip.length end
        local previewLength = endTime - startTime
        local fadeLength = 1
        if (fadeLength > previewLength * 0.5) then fadeLength = previewLength * 0.5 end

        previewPlaybackCoroutine = tm.StartCoroutine(function()
            while (true) do
                local timer = 0
                -- Start at volume 0
                previewTrackAudioSource = tm.audio.Play(clip, "Music", startTime, 0)
                while (timer < fadeLength) do
                    previewTrackAudioSource.volume = timer / fadeLength
                    timer = timer + unity.time.deltaTime
                    coroutine.yield()
                end
                previewTrackAudioSource.volume = 1
                timer = 0
                while (timer < previewLength - fadeLength * 2) do
                    timer = timer + unity.time.deltaTime
                    coroutine.yield()
                end
                timer = 0
                while (timer < fadeLength) do
                    previewTrackAudioSource.volume = 1 - timer / fadeLength
                    timer = timer + unity.time.deltaTime
                    coroutine.yield()
                end
            end
        end)
    end)
end

-- Called when transitioning back to select track panel, or to the game.
function StopPreviewTrackPlayback(tm)
    if (previewPlaybackCoroutine != nil) then
        tm.StopCoroutine(previewPlaybackCoroutine)
        previewPlaybackCoroutine = nil
    end
    
    if (previewTrackAudioSource != nil and previewTrackAudioSource.isPlaying) then
        tm.StartCoroutine(function()
            local timer = 0
            local fadeLength = 0.2
            while (timer < fadeLength) do
                previewTrackAudioSource.volume = 1 - timer / fadeLength
                timer = timer + unity.time.deltaTime
                coroutine.yield()
            end
            previewTrackAudioSource.Stop()
        end)
    end
end

InitializeSelectPatternPanel(tm)
InitializeModifierSidesheet(tm)